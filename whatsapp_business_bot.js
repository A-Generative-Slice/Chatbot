/**
 * üöÄ WhatsApp Business API Bot (No Twilio Dependency!)
 * Runs 24/7 on GitHub Codespaces
 * Direct WhatsApp Cloud API integration
 */

require('dotenv').config();
const express = require('express');
const axios = require('axios');
const fs = require('fs');

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ============================================================================
// CONFIGURATION
// ============================================================================

const PORT = process.env.PORT || 3000;
const WHATSAPP_TOKEN = process.env.WHATSAPP_TOKEN; // Meta WhatsApp API token
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID; // Your WhatsApp Business phone ID
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || 'your-verify-token-123';
const SARVAM_API_KEY = process.env.AI_API_KEY; // Sarvam AI API key

// Sarvam AI configuration
const SARVAM_API_URL = 'https://api.sarvam.ai/v1/chat/completions';

// üöÄ SARVAM AI MODELS - Best for Indian Languages!
const AI_MODELS = {
  // Primary: Sarvam-M - FREE model for Indian languages
  primary: 'sarvam-m',
  
  // Note: Sarvam AI specializes in:
  // - Tamil, Hindi, Telugu, Kannada, Malayalam, Bengali, Gujarati, Marathi
  // - Excellent grammar and natural responses
  // - Built specifically for Indian market
  // - FREE: ‚Çπ0 per token - Perfect for unlimited conversations!
};

// Welcome messages in different languages
const WELCOME_MESSAGES = {
  greeting: {
    en: "üôè *Welcome to Rose Chemicals!*\n\nWe're your trusted partner for premium cleaning solutions.",
    ta: "üôè *‡Æ∞‡Øã‡Æ∏‡Øç ‡Æï‡ØÜ‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øç‡Æ∏‡Øç ‡Æ®‡Æø‡Æ±‡ØÅ‡Æµ‡Æ©‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç!*\n\n‡Æ§‡Æ∞‡ÆÆ‡Ææ‡Æ© ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ§‡ÆØ‡Ææ‡Æ∞‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡ÆÆ‡Øç‡Æ™‡Æï‡ÆÆ‡Ææ‡Æ© ‡Æ§‡ØÅ‡Æ£‡Øà.",
    hi: "üôè *‡§∞‡•ã‡§ú ‡§ï‡•á‡§Æ‡§ø‡§ï‡§≤‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!*\n\n‡§π‡§Æ ‡§™‡•ç‡§∞‡•Ä‡§Æ‡§ø‡§Ø‡§Æ ‡§∏‡§´‡§æ‡§à ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§™‡§ï‡•á ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§∏‡§æ‡§•‡•Ä ‡§π‡•à‡§Ç‡•§",
    te: "üôè *‡∞∞‡±ã‡∞ú‡±ç ‡∞ï‡±Ü‡∞Æ‡∞ø‡∞ï‡∞≤‡±ç‡∞∏‡±ç‚Äå‡∞ï‡±Å ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!*\n\n‡∞™‡±ç‡∞∞‡±Ä‡∞Æ‡∞ø‡∞Ø‡∞Ç ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞™‡∞∞‡∞ø‡∞ö‡±á ‡∞™‡∞∞‡∞ø‡∞∑‡±ç‡∞ï‡∞æ‡∞∞‡∞æ‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Æ‡±á‡∞Æ‡±Å ‡∞Æ‡±Ä ‡∞®‡∞Æ‡±ç‡∞Æ‡∞ï‡∞Æ‡±à‡∞® ‡∞≠‡∞æ‡∞ó‡∞∏‡±ç‡∞µ‡∞æ‡∞Æ‡∞ø.",
    kn: "üôè *‡≤∞‡≥ã‡≤∏‡≥ç ‡≤ï‡≥Ü‡≤Æ‡≤ø‡≤ï‡≤≤‡≥ç‡≤∏‡≥ç‚Äå‡≤ó‡≥Ü ‡≤∏‡≥ç‡≤µ‡≤æ‡≤ó‡≤§!*\n\n‡≤™‡≥ç‡≤∞‡≥Ä‡≤Æ‡≤ø‡≤Ø‡≤Ç ‡≤∂‡≥Å‡≤ö‡≤ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ ‡≤™‡≤∞‡≤ø‡≤π‡≤æ‡≤∞‡≤ó‡≤≥‡≤ø‡≤ó‡≤æ‡≤ó‡≤ø ‡≤®‡≤æ‡≤µ‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤µ‡≤ø‡≤∂‡≥ç‡≤µ‡≤æ‡≤∏‡≤æ‡≤∞‡≥ç‡≤π ‡≤™‡≤æ‡≤≤‡≥Å‡≤¶‡≤æ‡≤∞‡≤∞‡≥Å.",
    ml: "üôè *‡¥±‡µã‡¥∏‡µç ‡¥ï‡µÜ‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µΩ‡¥∏‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç!*\n\n‡¥™‡µç‡¥∞‡µÄ‡¥Æ‡¥ø‡¥Ø‡¥Ç ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥ø‡¥Ç‡¥ó‡µç ‡¥∏‡µä‡¥≤‡µç‡¥Ø‡µÇ‡¥∑‡¥®‡µÅ‡¥ï‡µæ‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø ‡¥û‡¥ô‡µç‡¥ô‡µæ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥µ‡¥ø‡¥∂‡µç‡¥µ‡¥∏‡µç‡¥§ ‡¥™‡¥ô‡µç‡¥ï‡¥æ‡¥≥‡¥ø‡¥Ø‡¥æ‡¥£‡µç."
  },
  languagePrompt: {
    en: "\n\nüåê *Please select your preferred language:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\nJust reply with the number (1-6) or start chatting in your language! üòä",
    ta: "\n\nüåê *‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™ ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\n‡Æé‡Æ£‡Øç‡Æ£‡Øà (1-6) ‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Æø‡Æ≤‡Øç ‡Æ™‡Øá‡Æö ‡ÆÜ‡Æ∞‡ÆÆ‡Øç‡Æ™‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç! üòä",
    hi: "\n\nüåê *‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\n‡§®‡§Ç‡§¨‡§∞ (1-6) ‡§∏‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç ‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§§ ‡§ï‡§∞‡§®‡§æ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç! üòä",
    te: "\n\nüåê *‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Ä ‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\n‡∞∏‡∞Ç‡∞ñ‡±ç‡∞Ø‡∞§‡±ã (1-6) ‡∞™‡±ç‡∞∞‡∞§‡±ç‡∞Ø‡±Å‡∞§‡±ç‡∞§‡∞∞‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø ‡∞≤‡±á‡∞¶‡∞æ ‡∞Æ‡±Ä ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡∞ü‡∞Ç ‡∞™‡±ç‡∞∞‡∞æ‡∞∞‡∞Ç‡∞≠‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø! üòä",
    kn: "\n\nüåê *‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤Ü‡≤¶‡≥ç‡≤Ø‡≤§‡≥Ü‡≤Ø ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ü‡≤Ø‡≥ç‡≤ï‡≥Ü‡≤Æ‡≤æ‡≤°‡≤ø:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\n‡≤∏‡≤Ç‡≤ñ‡≥ç‡≤Ø‡≥Ü‡≤Ø‡≥ä‡≤Ç‡≤¶‡≤ø‡≤ó‡≥Ü (1-6) ‡≤™‡≥ç‡≤∞‡≤§‡≥ç‡≤Ø‡≥Å‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø ‡≤Ö‡≤•‡≤µ‡≤æ ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≠‡≤æ‡≤∑‡≥Ü‡≤Ø‡≤≤‡≥ç‡≤≤‡≤ø ‡≤ö‡≤æ‡≤ü‡≥ç ‡≤Æ‡≤æ‡≤°‡≤≤‡≥Å ‡≤™‡≥ç‡≤∞‡≤æ‡≤∞‡≤Ç‡≤≠‡≤ø‡≤∏‡≤ø! üòä",
    ml: "\n\nüåê *‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥á‡¥∑‡µç‡¥ü‡¥Æ‡µÅ‡¥≥‡µç‡¥≥ ‡¥≠‡¥æ‡¥∑ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥ï:*\n\n1Ô∏è‚É£ English\n2Ô∏è‚É£ ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç (Tamil)\n3Ô∏è‚É£ ‡§π‡§ø‡§Ç‡§¶‡•Ä (Hindi)\n4Ô∏è‚É£ ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å (Telugu)\n5Ô∏è‚É£ ‡≤ï‡≤®‡≥ç‡≤®‡≤° (Kannada)\n6Ô∏è‚É£ ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç (Malayalam)\n\n‡¥®‡¥Æ‡µç‡¥™‡µº (1-6) ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï ‡¥Ö‡¥≤‡µç‡¥≤‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥≠‡¥æ‡¥∑‡¥Ø‡¥ø‡µΩ ‡¥ö‡¥æ‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡µª ‡¥§‡µÅ‡¥ü‡¥ô‡µç‡¥ô‡µÅ‡¥ï! üòä"
  }
};

// Session storage (in production, use Redis or database)
const userSessions = new Map();

// Load products from JSON
let PRODUCTS_DATA = { categories: {} };
let ALL_PRODUCTS = [];

try {
  const productsRaw = fs.readFileSync('./products.json', 'utf-8');
  PRODUCTS_DATA = JSON.parse(productsRaw);
  
  // Flatten all products into a single array for easy searching
  for (const categoryKey in PRODUCTS_DATA.categories) {
    const category = PRODUCTS_DATA.categories[categoryKey];
    if (category.products) {
      ALL_PRODUCTS.push(...category.products.map(p => ({
        ...p,
        category: category.name
      })));
    }
  }
  console.log(`‚úÖ Loaded ${ALL_PRODUCTS.length} products from ${Object.keys(PRODUCTS_DATA.categories).length} categories`);
} catch (error) {
  console.error('‚ö†Ô∏è  Could not load products.json:', error.message);
}

// ============================================================================
// LANGUAGE DETECTION & TRANSLATION
// ============================================================================

const LANGUAGES = {
  en: { name: 'English', code: 'en_XX' },
  ta: { name: 'Tamil', code: 'ta_IN' },
  hi: { name: 'Hindi', code: 'hi_IN' },
  te: { name: 'Telugu', code: 'te_IN' },
  kn: { name: 'Kannada', code: 'kn_IN' },
  ml: { name: 'Malayalam', code: 'ml_IN' }
};

function detectLanguage(text) {
  const trimmed = text.trim();
  const lower = text.toLowerCase();
  
  // Check for language selection numbers
  if (trimmed === '1') return 'en';
  if (trimmed === '2') return 'ta';
  if (trimmed === '3') return 'hi';
  if (trimmed === '4') return 'te';
  if (trimmed === '5') return 'kn';
  if (trimmed === '6') return 'ml';
  
  // Check for Tanglish (Tamil words in English script)
  const tanglishPatterns = [
    /\b(vanakkam|vanakam|eppadi|epdi|irukeenga|irukinga|nalla|nalladhu|sari|serri|romba|rumba|nandri|thanks|soap|saabun|sabu|cleanser|floor|thurai|veedu|veetu)\b/i,
    /\b(podi|powder|thanni|water|paal|milk|velai|work|kaasu|money|price|vilai)\b/i
  ];
  if (tanglishPatterns.some(pattern => pattern.test(lower))) return 'ta';
  
  // Check for Hinglish (Hindi words in English script)
  const hinglishPatterns = [
    /\b(namaste|namaskar|kaise|kaisa|accha|acha|theek|thik|dhanyavaad|shukriya|soap|sabun|saaf|safai|ghar|floor)\b/i,
    /\b(paisa|paise|kitna|kitni|chahiye|chaiye|price|keemat|kya|hai|hain)\b/i
  ];
  if (hinglishPatterns.some(pattern => pattern.test(lower))) return 'hi';
  
  // Check for Tenglish (Telugu in English script)
  const tenglishPatterns = [
    /\b(namaskaram|namaskaaram|ela|elaa|unnaru|unnaaru|manchidi|manchi|thanks|dhanyavadalu|soap|sabbu|clean|safai|inti|illu)\b/i,
    /\b(dabbu|money|entha|enta|kavali|kavaali|price|viluva)\b/i
  ];
  if (tenglishPatterns.some(pattern => pattern.test(lower))) return 'te';
  
  // Check for language keywords
  if (lower.includes('english') || lower.includes('‡Æá‡Æô‡Øç‡Æï‡Æø‡Æ≤‡ØÄ‡Æ∑‡Øç') || lower.includes('‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä')) return 'en';
  if (lower.includes('tamil') || lower.includes('‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç') || lower.includes('‡§§‡§Æ‡§ø‡§≤')) return 'ta';
  if (lower.includes('hindi') || lower.includes('‡§π‡§ø‡§Ç‡§¶‡•Ä') || lower.includes('‡Æπ‡Æø‡Æ®‡Øç‡Æ§‡Æø')) return 'hi';
  if (lower.includes('telugu') || lower.includes('‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å') || lower.includes('‡§§‡•á‡§≤‡•Å‡§ó‡•Å')) return 'te';
  if (lower.includes('kannada') || lower.includes('‡≤ï‡≤®‡≥ç‡≤®‡≤°') || lower.includes('‡§ï‡§®‡•ç‡§®‡§°‡§º')) return 'kn';
  if (lower.includes('malayalam') || lower.includes('‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç') || lower.includes('‡§Æ‡§≤‡§Ø‡§æ‡§≤‡§Æ')) return 'ml';
  
  // Unicode range detection
  const tamilChars = /[\u0B80-\u0BFF]/;
  const hindiChars = /[\u0900-\u097F]/;
  const teluguChars = /[\u0C00-\u0C7F]/;
  const kannadaChars = /[\u0C80-\u0CFF]/;
  const malayalamChars = /[\u0D00-\u0D7F]/;

  if (tamilChars.test(text)) return 'ta';
  if (hindiChars.test(text)) return 'hi';
  if (teluguChars.test(text)) return 'te';
  if (kannadaChars.test(text)) return 'kn';
  if (malayalamChars.test(text)) return 'ml';
  return 'en';
}

// Get welcome message for new users
function getWelcomeMessage(language = 'en') {
  const lang = WELCOME_MESSAGES.greeting[language] || WELCOME_MESSAGES.greeting.en;
  const prompt = WELCOME_MESSAGES.languagePrompt[language] || WELCOME_MESSAGES.languagePrompt.en;
  return lang + prompt;
}

// ============================================================================
// WHATSAPP BUSINESS API FUNCTIONS
// ============================================================================

async function sendWhatsAppMessage(to, message) {
  try {
    const response = await axios.post(
      `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`,
      {
        messaging_product: 'whatsapp',
        to: to,
        type: 'text',
        text: { body: message }
      },
      {
        headers: {
          'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
    console.log(`‚úÖ Message sent to ${to}:`, message.substring(0, 50) + '...');
    return response.data;
  } catch (error) {
    console.error('‚ùå WhatsApp send error:', error.response?.data || error.message);
    throw error;
  }
}

async function markAsRead(messageId) {
  try {
    await axios.post(
      `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`,
      {
        messaging_product: 'whatsapp',
        status: 'read',
        message_id: messageId
      },
      {
        headers: {
          'Authorization': `Bearer ${WHATSAPP_TOKEN}`,
          'Content-Type': 'application/json'
        }
      }
    );
  } catch (error) {
    console.error('‚ö†Ô∏è  Mark as read error:', error.message);
  }
}

// ============================================================================
// PRODUCT SEARCH
// ============================================================================

function searchProducts(query, limit = 5) {
  const queryLower = query.toLowerCase();
  const words = queryLower.split(/\s+/);
  
  const matches = ALL_PRODUCTS.map(product => {
    let score = 0;
    
    // Search in name
    if (product.name.toLowerCase().includes(queryLower)) score += 10;
    
    // Search in description
    if (product.description && product.description.toLowerCase().includes(queryLower)) score += 5;
    
    // Search in keywords
    if (product.keywords) {
      for (const keyword of product.keywords) {
        if (keyword.toLowerCase().includes(queryLower)) score += 3;
        for (const word of words) {
          if (keyword.toLowerCase().includes(word)) score += 1;
        }
      }
    }
    
    // Search in category
    if (product.category && product.category.toLowerCase().includes(queryLower)) score += 4;
    
    return { product, score };
  })
  .filter(item => item.score > 0)
  .sort((a, b) => b.score - a.score)
  .slice(0, limit)
  .map(item => item.product);
  
  return matches;
}

// ============================================================================
// AI RESPONSE GENERATION - ENHANCED MULTILINGUAL WITH BETTER GRAMMAR
// ============================================================================

async function generateAIResponse(userMessage, language, products, isFirstMessage = false) {
  // Search for relevant products
  const relevantProducts = searchProducts(userMessage, 5);
  
  // Build product context with rich details - MORE PROMINENT FORMAT
  let productContext = '';
  if (relevantProducts.length > 0) {
    productContext = '\n\nüéØ PRODUCTS TO RECOMMEND:\n';
    relevantProducts.forEach((p, i) => {
      productContext += `\n${i + 1}. **${p.name}** - ‚Çπ${p.mrp}\n`;
      if (p.description) {
        productContext += `   Description: ${p.description}\n`;
      }
      if (p.uses && p.uses.length > 0) {
        productContext += `   Uses: ${p.uses.slice(0, 3).join(', ')}\n`;
      }
      if (p.category) {
        productContext += `   Category: ${p.category}\n`;
      }
    });
    productContext += '\n‚ö†Ô∏è YOU MUST MENTION THESE PRODUCTS IN YOUR RESPONSE!\n';
  } else {
    // No specific match - show general product categories
    productContext = '\n\nüì¶ ROSE CHEMICALS PRODUCTS:\n';
    productContext += '‚Ä¢ Floor Cleaners (Phenyl, Acid-based)\n';
    productContext += '‚Ä¢ Toilet Cleaners (Acid-based, Liquid)\n';
    productContext += '‚Ä¢ Dishwash Liquids & Bars\n';
    productContext += '‚Ä¢ Detergents & Fabric Care\n';
    productContext += '‚Ä¢ Hand Wash & Sanitizers\n';
    productContext += '‚Ä¢ Glass & Surface Cleaners\n';
    productContext += '\n‚ö†Ô∏è INFORM CUSTOMER ABOUT THESE CATEGORIES!\n';
  }
  
  // CRITICAL: Language-first system prompts - Target language instructions FIRST
  const systemPrompts = {
    en: `You are a sales assistant for Rose Chemicals. Respond ONLY in English with proper grammar.

Customer message: "${userMessage}"

IMPORTANT: You MUST mention at least 2-3 products from the list below in your response. Include product names and prices.

Help them find cleaning products. Be friendly and concise.
${productContext}

REMEMBER: Always include product names and prices (‚Çπ) in your response!`,

    ta: `‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ∞‡Øã‡Æ∏‡Øç ‡Æï‡ØÜ‡ÆÆ‡Æø‡Æï‡Øç‡Æï‡Æ≤‡Øç‡Æ∏‡Øç ‡Æ®‡Æø‡Æ±‡ØÅ‡Æµ‡Æ©‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æµ‡Æø‡Æ±‡Øç‡Æ™‡Æ©‡Øà ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æ≥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.

‡Æµ‡Ææ‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡Æø: "${userMessage}"

‡ÆÆ‡ØÅ‡Æï‡Øç‡Æï‡Æø‡ÆØ‡ÆÆ‡Øç: ‡Æï‡ØÄ‡Æ¥‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥ ‡Æ™‡Æü‡Øç‡Æü‡Æø‡ÆØ‡Æ≤‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æï‡ØÅ‡Æ±‡Øà‡Æ®‡Øç‡Æ§‡Æ§‡ØÅ 2-3 ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øà ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æø‡Æ≤‡Øç ‡Æï‡ØÅ‡Æ±‡Æø‡Æ™‡Øç‡Æ™‡Æø‡Æü ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç. ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.

‡ÆÖ‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æï‡Øç‡Æï ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç. ‡Æ®‡Æü‡Øç‡Æ™‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÅ‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ÆÆ‡Ææ‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æ≥‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.
${productContext}

‡Æ®‡Æø‡Æ©‡Øà‡Æµ‡Æø‡Æ≤‡Øç ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç: ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øà (‚Çπ) ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æ§‡Æø‡Æ≤‡Æø‡Æ≤‡Øç ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç!
‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æé‡Æ¥‡ØÅ‡Æ§‡Æµ‡ØÅ‡ÆÆ‡Øç. ‡ÆÜ‡Æô‡Øç‡Æï‡Æø‡Æ≤‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æé‡Æ¥‡ØÅ‡Æ§ ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡Ææ‡ÆÆ‡Øç.`,

    hi: `‡§Ü‡§™ ‡§∞‡•ã‡§ú ‡§ï‡•á‡§Æ‡§ø‡§ï‡§≤‡•ç‡§∏ ‡§ï‡•á ‡§µ‡§ø‡§ï‡•ç‡§∞‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç‡•§ ‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§

‡§ó‡•ç‡§∞‡§æ‡§π‡§ï ‡§ï‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂: "${userMessage}"

‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§Ü‡§™‡§ï‡•ã ‡§®‡•Ä‡§ö‡•á ‡§¶‡•Ä ‡§ó‡§à ‡§∏‡•Ç‡§ö‡•Ä ‡§∏‡•á ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 2-3 ‡§â‡§§‡•ç‡§™‡§æ‡§¶‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§≤‡•ç‡§≤‡•á‡§ñ ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ‡•§ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§

‡§â‡§®‡•ç‡§π‡•á‡§Ç ‡§∏‡§´‡§æ‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç‡•§ ‡§Æ‡§ø‡§§‡•ç‡§∞‡§µ‡§§ ‡§î‡§∞ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§Æ‡•á‡§Ç ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§
${productContext}

‡§Ø‡§æ‡§¶ ‡§∞‡§ñ‡•á‡§Ç: ‡§π‡§Æ‡•á‡§∂‡§æ ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ï‡•á ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§ï‡•Ä‡§Æ‡§§‡•á‡§Ç (‚Çπ) ‡§Ö‡§™‡§®‡•á ‡§ú‡§µ‡§æ‡§¨ ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç!
‡§ï‡•á‡§µ‡§≤ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§ ‡§Ö‡§Ç‡§ó‡•ç‡§∞‡•á‡§ú‡•Ä ‡§Æ‡•á‡§Ç ‡§® ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§`,

    te: `‡∞Æ‡±Ä‡∞∞‡±Å ‡∞∞‡±ã‡∞ú‡±ç ‡∞ï‡±Ü‡∞Æ‡∞ø‡∞ï‡∞≤‡±ç‡∞∏‡±ç ‡∞µ‡∞ø‡∞ï‡±ç‡∞∞‡∞Ø ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å. ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø‡•§

‡∞ï‡∞∏‡±ç‡∞ü‡∞Æ‡∞∞‡±ç ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞Ç: "${userMessage}"

‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞Æ‡±à‡∞®‡∞¶‡∞ø: ‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶ ‡∞â‡∞®‡±ç‡∞® ‡∞ú‡∞æ‡∞¨‡∞ø‡∞§‡∞æ ‡∞®‡±Å‡∞Ç‡∞°‡∞ø ‡∞ï‡∞®‡±Ä‡∞∏‡∞Ç 2-3 ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç‡∞≤‡±ã ‡∞™‡±á‡∞∞‡±ç‡∞ï‡±ä‡∞®‡∞æ‡∞≤‡∞ø. ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ß‡∞∞‡∞≤‡∞®‡±Å ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§

‡∞µ‡∞æ‡∞∞‡∞ø‡∞ï‡∞ø ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞™‡∞∞‡∞ø‡∞ö‡±á ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞°‡∞Ç‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞∏‡±ç‡∞®‡±á‡∞π‡∞™‡±Ç‡∞∞‡±ç‡∞µ‡∞ï‡∞Ç‡∞ó‡∞æ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞Ç‡∞ï‡±ç‡∞∑‡∞ø‡∞™‡±ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø‡•§
${productContext}

‡∞ó‡±Å‡∞∞‡±ç‡∞§‡±Å‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø: ‡∞é‡∞≤‡±ç‡∞≤‡∞™‡±ç‡∞™‡±Å‡∞°‡±Ç ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡∞ø ‡∞™‡±á‡∞∞‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ß‡∞∞‡∞≤‡∞®‡±Å (‚Çπ) ‡∞Æ‡±Ä ‡∞∏‡∞Æ‡∞æ‡∞ß‡∞æ‡∞®‡∞Ç‡∞≤‡±ã ‡∞ö‡±á‡∞∞‡±ç‡∞ö‡∞Ç‡∞°‡∞ø!
‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞∞‡∞æ‡∞Ø‡∞Ç‡∞°‡∞ø. ‡∞Ü‡∞Ç‡∞ó‡±ç‡∞≤‡∞Ç‡∞≤‡±ã ‡∞∞‡∞æ‡∞Ø‡∞µ‡∞¶‡±ç‡∞¶‡±Å‡•§`,

    kn: `‡≤®‡≥Ä‡≤µ‡≥Å ‡≤∞‡≥ã‡≤∏‡≥ç ‡≤ï‡≥Ü‡≤Æ‡≤ø‡≤ï‡≤≤‡≥ç‡≤∏‡≥ç ‡≤Æ‡≤æ‡≤∞‡≤æ‡≤ü ‡≤∏‡≤π‡≤æ‡≤Ø‡≤ï. ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø‡•§

‡≤ó‡≥ç‡≤∞‡≤æ‡≤π‡≤ï‡≤∞ ‡≤∏‡≤Ç‡≤¶‡≥á‡≤∂: "${userMessage}"

‡≤Æ‡≥Å‡≤ñ‡≥ç‡≤Ø: ‡≤ï‡≥Ü‡≤≥‡≤ó‡≤ø‡≤® ‡≤™‡≤ü‡≥ç‡≤ü‡≤ø‡≤Ø‡≤ø‡≤Ç‡≤¶ ‡≤ï‡≤®‡≤ø‡≤∑‡≥ç‡≤† 2-3 ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤â‡≤≤‡≥ç‡≤≤‡≥á‡≤ñ‡≤ø‡≤∏‡≤¨‡≥á‡≤ï‡≥Å. ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤¶ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤¨‡≥Ü‡≤≤‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø‡•§

‡≤Ö‡≤µ‡≤∞‡≤ø‡≤ó‡≥Ü ‡≤∂‡≥Å‡≤ö‡≤ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤≤‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≤ø. ‡≤∏‡≥ç‡≤®‡≥á‡≤π‡≤™‡≤∞ ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤∏‡≤Ç‡≤ï‡≥ç‡≤∑‡≤ø‡≤™‡≥ç‡≤§‡≤µ‡≤æ‡≤ó‡≤ø ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤ø‡≤∏‡≤ø‡•§
${productContext}

‡≤®‡≥Ü‡≤®‡≤™‡≤ø‡≤°‡≤ø: ‡≤Ø‡≤æ‡≤µ‡≤æ‡≤ó‡≤≤‡≥Ç ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤¶ ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤¨‡≥Ü‡≤≤‡≥Ü‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å (‚Çπ) ‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤â‡≤§‡≥ç‡≤§‡≤∞‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤∏‡≥á‡≤∞‡≤ø‡≤∏‡≤ø!
‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤Æ‡≤æ‡≤§‡≥ç‡≤∞ ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤ø‡≤∞‡≤ø. ‡≤á‡≤Ç‡≤ó‡≥ç‡≤≤‡≤ø‡≤∑‡≥ç‚Äå‡≤®‡≤≤‡≥ç‡≤≤‡≤ø ‡≤¨‡≤∞‡≥Ü‡≤Ø‡≤¨‡≥á‡≤°‡≤ø‡•§`,

    ml: `‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥±‡µã‡¥∏‡µç ‡¥ï‡µÜ‡¥Æ‡¥ø‡¥ï‡µç‡¥ï‡µΩ‡¥∏‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥ø‡µΩ‡¥™‡µç‡¥™‡¥® ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø. ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï‡•§

‡¥â‡¥™‡¥≠‡µã‡¥ï‡µç‡¥§‡µÉ ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç: "${userMessage}"

‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥®‡¥Ç: ‡¥§‡¥æ‡¥¥‡µÜ‡¥Ø‡µÅ‡¥≥‡µç‡¥≥ ‡¥≤‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥ï‡µÅ‡¥±‡¥û‡µç‡¥û‡¥§‡µç 2-3 ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥™‡¥∞‡¥æ‡¥Æ‡µº‡¥∂‡¥ø‡¥ï‡µç‡¥ï‡¥£‡¥Ç. ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥® ‡¥®‡¥æ‡¥Æ‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥µ‡¥ø‡¥≤‡¥ï‡¥≥‡µÅ‡¥Ç ‡¥â‡µæ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï‡•§

‡¥Ö‡¥µ‡¥∞‡µÜ ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥ø‡¥Ç‡¥ó‡µç ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï. ‡¥∏‡µó‡¥π‡¥æ‡µº‡¥¶‡µç‡¥¶‡¥™‡¥∞‡¥µ‡µÅ‡¥Ç ‡¥∏‡¥Ç‡¥ï‡µç‡¥∑‡¥ø‡¥™‡µç‡¥§‡¥µ‡µÅ‡¥Æ‡¥æ‡¥Ø‡¥ø ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï‡•§
${productContext}

‡¥ì‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï: ‡¥é‡¥≤‡µç‡¥≤‡¥æ‡¥Ø‡µç‡¥™‡µç‡¥™‡µã‡¥¥‡µÅ‡¥Ç ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥® ‡¥®‡¥æ‡¥Æ‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥µ‡¥ø‡¥≤‡¥ï‡¥≥‡µÅ‡¥Ç (‚Çπ) ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Æ‡¥±‡µÅ‡¥™‡¥ü‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥â‡µæ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï!
‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥Æ‡¥æ‡¥§‡µç‡¥∞‡¥Ç ‡¥é‡¥¥‡µÅ‡¥§‡µÅ‡¥ï. ‡¥á‡¥Ç‡¥ó‡µç‡¥≤‡µÄ‡¥∑‡¥ø‡µΩ ‡¥é‡¥¥‡µÅ‡¥§‡¥∞‡µÅ‡¥§‡µç‡•§`
  };

  const systemPrompt = systemPrompts[language] || systemPrompts.en;

  // üéØ Sarvam AI model - FREE for Indian languages!
  const modelCascade = [
    { name: 'Sarvam-M (FREE - Indian Languages)', model: AI_MODELS.primary, temp: 0.7, maxTokens: 512 }
  ];

  // Try the model
  for (const { name, model, temp, maxTokens } of modelCascade) {
    try {
      console.log(`ü§ñ Trying ${name} [${model}]...`);
      
      const response = await axios.post(
        SARVAM_API_URL,
        {
          model: model,
          messages: [
            { role: 'system', content: systemPrompt },
            { role: 'user', content: userMessage }
          ],
          max_tokens: maxTokens,
          temperature: temp,
          top_p: 0.9
        },
        {
          headers: {
            'api-subscription-key': SARVAM_API_KEY,
            'Content-Type': 'application/json'
          },
          timeout: 15000 // 15s timeout
        }
      );

      const aiText = response.data.choices[0].message.content.trim();
      
      // Basic quality validation
      if (aiText.length < 15) {
        throw new Error('Response too short');
      }
      
      console.log(`‚úÖ ${name} generated ${aiText.length} chars`);
      return aiText;

    } catch (error) {
      console.error(`‚ö†Ô∏è  ${name} failed: ${error.response?.data?.error?.message || error.message}`);
      if (error.response?.data) {
        console.error('Full error:', JSON.stringify(error.response.data, null, 2));
      }
      // Continue to fallback
      continue;
    }
  }

  // All models failed - use intelligent fallback
  console.log('‚ö†Ô∏è  All AI models failed, using enhanced fallback response...');
  
  // Enhanced fallback responses with product info
  const fallbacks = {
    en: `üëã Hello! I'm here to help you find the best cleaning products.\n\n${relevantProducts.length > 0 ? `I found these for you:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}What specific cleaning solution do you need? üßπ`,
    
    ta: `‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! üôè ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æï‡Øç‡Æï ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç.\n\n${relevantProducts.length > 0 ? `‡Æá‡Æ§‡Øã ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æ≥‡Øç:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}‡Æé‡Æ©‡Øç‡Æ© ‡Æ§‡Øá‡Æµ‡Øà? üßπ`,
    
    hi: `‡§®‡§Æ‡§∏‡•ç‡§§‡•á! üôè ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞‡•Ä‡§® ‡§∏‡§´‡§æ‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§\n\n${relevantProducts.length > 0 ? `‡§Ø‡§π ‡§¶‡•á‡§ñ‡•á‡§Ç:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è? üßπ`,
    
    te: `‡∞®‡∞Æ‡∞∏‡±ç‡∞ï‡∞æ‡∞∞‡∞Ç! üôè ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞â‡∞§‡±ç‡∞§‡∞Æ ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞™‡∞∞‡∞ø‡∞ö‡±á ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡±Å‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞°‡∞Ç‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞®‡±Å‡•§\n\n${relevantProducts.length > 0 ? `‡∞á‡∞¶‡∞ø‡∞ó‡±ã ‡∞Æ‡±Ä ‡∞ï‡±ã‡∞∏‡∞Ç:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}‡∞Æ‡±Ä‡∞ï‡±Å ‡∞è‡∞Æ‡∞ø ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø? üßπ`,
    
    kn: `‡≤®‡≤Æ‡≤∏‡≥ç‡≤ï‡≤æ‡≤∞! üôè ‡≤®‡≤æ‡≤®‡≥Å ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤â‡≤§‡≥ç‡≤§‡≤Æ ‡≤∂‡≥Å‡≤ö‡≤ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥Å‡≤°‡≥Å‡≤ï‡≤≤‡≥Å ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤®‡≥Ü‡•§\n\n${relevantProducts.length > 0 ? `‡≤á‡≤≤‡≥ç‡≤≤‡≤ø‡≤¶‡≥Ü:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤è‡≤®‡≥Å ‡≤¨‡≥á‡≤ï‡≥Å? üßπ`,
    
    ml: `‡¥®‡¥Æ‡¥∏‡µç‡¥ï‡¥æ‡¥∞‡¥Ç! üôè ‡¥Æ‡¥ø‡¥ï‡¥ö‡µç‡¥ö ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥ø‡¥Ç‡¥ó‡µç ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥ï‡¥£‡µç‡¥ü‡µÜ‡¥§‡µç‡¥§‡¥æ‡µª ‡¥û‡¥æ‡µª ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç‡•§\n\n${relevantProducts.length > 0 ? `‡¥á‡¥§‡¥æ:\n${relevantProducts[0].name} - ‚Çπ${relevantProducts[0].mrp}\n\n` : ''}‡¥é‡¥®‡µç‡¥§‡¥æ‡¥£‡µç ‡¥µ‡µá‡¥£‡µç‡¥ü‡¥§‡µç? üßπ`
  };
  
  return fallbacks[language] || fallbacks.en;
}

// ============================================================================
// WEBHOOK VERIFICATION (Required by WhatsApp)
// ============================================================================

app.get('/webhook', (req, res) => {
  const mode = req.query['hub.mode'];
  const token = req.query['hub.verify_token'];
  const challenge = req.query['hub.challenge'];

  console.log('üîç Webhook verification request:', { mode, token, challenge });
  console.log('üîë Expected token:', VERIFY_TOKEN);

  if (mode === 'subscribe' && token === VERIFY_TOKEN) {
    console.log('‚úÖ Webhook verified! Sending challenge:', challenge);
    res.status(200).type('text/plain').send(challenge);
  } else {
    console.error('‚ùå Webhook verification failed');
    console.error('   Mode match:', mode === 'subscribe');
    console.error('   Token match:', token === VERIFY_TOKEN);
    res.sendStatus(403);
  }
});

// ============================================================================
// WEBHOOK MESSAGE HANDLER
// ============================================================================

app.post('/webhook', async (req, res) => {
  try {
    // Quick 200 response to WhatsApp (they require this within 5 seconds)
    res.sendStatus(200);

    const body = req.body;

    // Check if it's a WhatsApp message
    if (body.object !== 'whatsapp_business_account') {
      return;
    }

    // Extract message data
    const entry = body.entry?.[0];
    const changes = entry?.changes?.[0];
    const value = changes?.value;
    const messages = value?.messages;

    if (!messages || messages.length === 0) {
      return;
    }

    const message = messages[0];
    const from = message.from; // Phone number
    const messageId = message.id;
    const messageBody = message.text?.body;

    if (!messageBody) {
      return; // Ignore non-text messages for now
    }

    console.log(`\nüì± Message from ${from}: "${messageBody}"`);

    // Mark as read
    await markAsRead(messageId);

    // Check if user says "hi" or "hello" - always show greeting menu
    const isGreeting = /^(hi|hello|hey|hii|helo|hola|vanakkam|vanakam|namaste|namaskar|namaskaram)$/i.test(messageBody.trim());
    
    if (isGreeting) {
      // Reset language selection for greeting
      let session = userSessions.get(from);
      if (session) {
        session.languageSelected = false;
        session.language = 'en';
      }
      const welcomeMsg = getWelcomeMessage('en');
      await sendWhatsAppMessage(from, welcomeMsg);
      console.log(`üëã User ${from} said greeting - showing language menu`);
      return;
    }

    // Get or create user session
    let session = userSessions.get(from);
    const isNewUser = !session;
    
    if (!session) {
      session = {
        language: 'en', // Start with English for greeting
        conversationContext: [],
        createdAt: Date.now(),
        languageSelected: false
      };
      userSessions.set(from, session);
    }

    // Check if this is a language selection (only if not yet selected)
    if (!session.languageSelected) {
      const detectedLang = detectLanguage(messageBody);
      if (detectedLang !== 'en' || ['1','2','3','4','5','6'].includes(messageBody.trim())) {
        session.language = detectedLang;
        session.languageSelected = true;
        console.log(`üåç User ${from} selected language: ${detectedLang}`);
        
        // Send a confirmation in their selected language
        const confirmations = {
          en: "Great! I'll help you in English. üòä\n\nWhat cleaning products are you looking for?",
          ta: "‡Æö‡Æ∞‡Æø! ‡Æ®‡Ææ‡Æ©‡Øç ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Æø‡Æ≤‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. üòä\n\n‡Æé‡Æ®‡Øç‡Æ§ ‡Æö‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡ÆÆ‡Øç ‡Æ™‡Øä‡Æ∞‡ØÅ‡Æü‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Øá‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç?",
          hi: "‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Æ‡•à‡§Ç ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ üòä\n\n‡§Ü‡§™‡§ï‡•ã ‡§ï‡•å‡§® ‡§∏‡•á ‡§∏‡§´‡§æ‡§à ‡§â‡§§‡•ç‡§™‡§æ‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è?",
          te: "‡∞Ö‡∞¶‡±ç‡∞≠‡±Å‡∞§‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å‡∞≤‡±ã ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡∞æ‡∞®‡±Å‡•§ üòä\n\n‡∞Æ‡±Ä‡∞ï‡±Å ‡∞è ‡∞∂‡±Å‡∞≠‡±ç‡∞∞‡∞™‡∞∞‡∞ø‡∞ö‡±á ‡∞â‡∞§‡±ç‡∞™‡∞§‡±ç‡∞§‡±Å‡∞≤‡±Å ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø?",
          kn: "‡≤Ö‡≤¶‡≥ç‡≤≠‡≥Å‡≤§! ‡≤®‡≤æ‡≤®‡≥Å ‡≤ï‡≤®‡≥ç‡≤®‡≤°‡≤¶‡≤≤‡≥ç‡≤≤‡≤ø ‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤∏‡≤π‡≤æ‡≤Ø ‡≤Æ‡≤æ‡≤°‡≥Å‡≤§‡≥ç‡≤§‡≥á‡≤®‡≥Ü‡•§ üòä\n\n‡≤®‡≤ø‡≤Æ‡≤ó‡≥Ü ‡≤Ø‡≤æ‡≤µ ‡≤∂‡≥Å‡≤ö‡≤ø‡≤ó‡≥ä‡≤≥‡≤ø‡≤∏‡≥Å‡≤µ ‡≤â‡≤§‡≥ç‡≤™‡≤®‡≥ç‡≤®‡≤ó‡≤≥‡≥Å ‡≤¨‡≥á‡≤ï‡≥Å?",
          ml: "‡¥Æ‡¥ø‡¥ï‡¥ö‡µç‡¥ö‡¥§‡µç! ‡¥û‡¥æ‡µª ‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥§‡µç‡¥§‡¥ø‡µΩ ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÜ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥Ç‡•§ üòä\n\n‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥è‡¥§‡µç ‡¥ï‡µç‡¥≤‡µÄ‡¥®‡¥ø‡¥Ç‡¥ó‡µç ‡¥â‡µΩ‡¥™‡µç‡¥™‡¥®‡µç‡¥®‡¥ô‡µç‡¥ô‡µæ ‡¥µ‡µá‡¥£‡¥Ç?"
        };
        await sendWhatsAppMessage(from, confirmations[detectedLang] || confirmations.en);
        return; // Don't process this message further
      }
    }

    // Auto-detect language from message if already selected (for Tanglish, Hinglish, etc.)
    if (session.languageSelected) {
      const detectedLang = detectLanguage(messageBody);
      if (detectedLang !== 'en') {
        session.language = detectedLang;
        console.log(`üîÑ Detected ${detectedLang} (possibly romanized) - responding in ${detectedLang}`);
      }
    }

    // Update context
    session.conversationContext.push({
      role: 'user',
      content: messageBody,
      timestamp: Date.now()
    });

    // Generate AI response
    const aiResponse = await generateAIResponse(
      messageBody,
      session.language,
      ALL_PRODUCTS
    );

    // Send response
    await sendWhatsAppMessage(from, aiResponse);

    // Update context
    session.conversationContext.push({
      role: 'assistant',
      content: aiResponse,
      timestamp: Date.now()
    });

    // Clean up old sessions (older than 24 hours)
    const now = Date.now();
    for (const [phone, sess] of userSessions.entries()) {
      if (now - sess.createdAt > 24 * 60 * 60 * 1000) {
        userSessions.delete(phone);
      }
    }

  } catch (error) {
    console.error('‚ùå Webhook error:', error);
  }
});

// ============================================================================
// HEALTH CHECK
// ============================================================================

app.get('/', (req, res) => {
  res.json({
    status: '‚úÖ Bot is running!',
    uptime: process.uptime(),
    sessions: userSessions.size,
    timestamp: new Date().toISOString()
  });
});

app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    ai: SARVAM_API_KEY ? 'configured (Sarvam AI)' : 'missing',
    whatsapp: WHATSAPP_TOKEN && PHONE_NUMBER_ID ? 'configured' : 'missing'
  });
});

// ============================================================================
// START SERVER
// ============================================================================

app.listen(PORT, () => {
  console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log('   ü§ñ AI SALES BOT - WhatsApp Business API');
  console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
  console.log(`\n‚úÖ Server running on port ${PORT}`);
  console.log(`üåê Health check: http://localhost:${PORT}/health`);
  console.log(`üì± WhatsApp webhook: http://localhost:${PORT}/webhook`);
  console.log(`\nüîë Configuration:`);
  console.log(`   ‚Ä¢ Sarvam AI: ${SARVAM_API_KEY ? '‚úÖ Configured (Indian Languages Specialist!)' : '‚ùå Missing'}`);
  console.log(`   ‚Ä¢ WhatsApp Token: ${WHATSAPP_TOKEN ? '‚úÖ Configured' : '‚ùå Missing'}`);
  console.log(`   ‚Ä¢ Phone Number ID: ${PHONE_NUMBER_ID ? '‚úÖ Configured' : '‚ùå Missing'}`);
  console.log('\nüí° Press Ctrl+C to stop\n');
});
