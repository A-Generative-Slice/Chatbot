const express = require('express');
const bodyParser = require('body-parser');
const { MessagingResponse } = require('twilio').twiml;
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

const app = express();
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// Enhanced logging middleware
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path}`);
  next();
});

// Load products knowledge base
let products = {};
let productsKnowledge = {};
try {
  const productsData = fs.readFileSync(path.join(__dirname, 'products.json'), 'utf8');
  products = JSON.parse(productsData);
  console.log('тЬЕ Products knowledge base loaded successfully');
} catch (error) {
  console.error('тЭМ Error loading products.json:', error);
}

// Load detailed knowledge base
try {
  const knowledgeData = fs.readFileSync(path.join(__dirname, 'products_knowledge_enhanced.json'), 'utf8');
  productsKnowledge = JSON.parse(knowledgeData);
  console.log('тЬЕ Enhanced detailed knowledge base loaded successfully');
} catch (error) {
  console.error('тЭМ Error loading products_knowledge_enhanced.json:', error);
}

// User session storage (in production, use Redis or database)
const userSessions = new Map();

// Language translations
const translations = {
  en: {
    welcome: "ЁЯЫНя╕П *Welcome to Rose Chemicals!*\n\nPlease select your preferred language:",
    languageMenu: "ЁЯМР *Choose Language:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nReply with number (1-6)",
    greeting: "Hello! ЁЯЫНя╕П Welcome to Rose Chemicals!\n\nтЬи *We offer:*\nтАв Chemicals & Raw Materials\nтАв Cleaning Products\nтАв Perfumes & Fragrances\nтАв Brushes & Equipment\n\nЁЯФН *Try asking:*\nтАв \"Show me cleaning products\"\nтАв \"What is the price of acetic acid?\"\nтАв \"Browse perfumes\"\nтАв \"Categories\" to see all",
    greetingResponse: "Hello! ЁЯСЛ Welcome to Rose Chemicals!\n\nЁЯЫНя╕П I'm here to help you find the perfect products for your needs.\n\nЁЯТб *Quick commands:*\nтАв \"Categories\" - Browse all products\nтАв \"Search [product]\" - Find specific items\nтАв \"Help\" - Get assistance\n\nWhat can I help you find today?",
    thanksResponse: "You're welcome! ЁЯШК\n\nI'm always here to help you find the best products. Feel free to ask anything else!",
    noResults: "тЭМ No products found for \"{query}\"\n\nЁЯТб *Try:*\nтАв Different keywords\nтАв Check spelling\nтАв Browse \"Categories\"\nтАв Ask \"Help\" for guidance",
    help: "ЁЯдЦ *How can I help you?*\n\nЁЯЫТ *Shopping:*\nтАв Browse categories\nтАв Search products\nтАв Get prices\nтАв Place orders\n\nЁЯФН *Examples:*\nтАв \"Show cleaning products\"\nтАв \"Price of acetic acid\"\nтАв \"Add to cart\"\nтАв \"Checkout\"",
    categories: "ЁЯУВ *Our Categories:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв Price: тВ╣{price}\nтАв Category: {category}\nтАв Code: #{id}\n\nЁЯЫТ Reply \"*Add {name}*\" to add to cart",
    searchResults: "ЁЯФН Found {count} products for \"{query}\":",
    cart: "ЁЯЫТ *Your Cart:*\n\n{items}\n\nЁЯТ░ *Total: тВ╣{total}*\n\nReply \"*Checkout*\" to place order",
    orderPlaced: "тЬЕ *Order Confirmed!*\n\nOrder ID: #{orderId}\nTotal: тВ╣{total}\n\nWe'll contact you shortly for delivery details! ЁЯУЮ",
    unknownQuery: "ЁЯдФ I didn't quite understand that.\n\nЁЯТб *Try:*\nтАв \"Categories\" - Browse products\nтАв \"Help\" - Get assistance\nтАв \"Search [product name]\" - Find items\n\nWhat are you looking for?"
  },
  ta: {
    welcome: "ЁЯЫНя╕П *ро░рпЛро╕рпН роХрпЖрооро┐роХрпНроХро▓рпНро╕рпН-роХрпНроХрпБ ро╡рогроХрпНроХроорпН!*\n\nроЙроЩрпНроХро│рпН ро╡ро┐ро░рпБрокрпНрокрооро╛рой роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:",
    languageMenu: "ЁЯМР *роорпКро┤ро┐ родрпЗро░рпНро╡рпБ:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nроОрогрпНрогрпБроЯройрпН рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН (1-6)",
    greeting: "ро╡рогроХрпНроХроорпН! ЁЯЫНя╕П ро░рпЛро╕рпН роХрпЖрооро┐роХрпНроХро▓рпНро╕рпН-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!\n\nтЬи *роОроЩрпНроХро│рпН родропро╛ро░ро┐рокрпНрокрпБроХро│рпН:*\nтАв ро░роЪро╛ропройроЩрпНроХро│рпН & роорпВро▓рокрпНрокрпКро░рпБроЯрпНроХро│рпН\nтАв роЪрпБродрпНродроорпН роЪрпЖропрпНропрпБроорпН рокрпКро░рпБроЯрпНроХро│рпН\nтАв ро╡ро╛роЪройрпИ родро┐ро░ро╡ро┐ропроЩрпНроХро│рпН\nтАв родрпВро░ро┐роХрпИроХро│рпН & роЙрокроХро░рогроЩрпНроХро│рпН\n\nЁЯФН *роХрпЗроЯрпНроХро▓ро╛роорпН:*\nтАв \"роЪрпБродрпНродроорпН роЪрпЖропрпНропрпБроорпН рокрпКро░рпБроЯрпНроХро│рпН роХро╛роЯрпНроЯрпБроЩрпНроХро│рпН\"\nтАв \"роЕроЪро┐роЯрпНроЯро┐роХрпН роЖроЪро┐роЯрпН ро╡ро┐ро▓рпИ роОройрпНрой?\"\nтАв \"ро╡ро╛роЪройрпИ родро┐ро░ро╡ро┐ропроЩрпНроХро│рпН\"\nтАв \"ро╡роХрпИроХро│рпН\"",
    greetingResponse: "ро╡рогроХрпНроХроорпН! ЁЯСЛ ро░рпЛро╕рпН роХрпЖрооро┐роХрпНроХро▓рпНро╕рпН-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!\n\nЁЯЫНя╕П роЙроЩрпНроХро│рпБроХрпНроХрпБ родрпЗро╡рпИропро╛рой рокрпКро░рпБроЯрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп роиро╛ройрпН роЗроЩрпНроХрпЗ роЙро│рпНро│рпЗройрпН.\n\nЁЯТб *ро╡ро┐ро░рпИро╡рпБ роХроЯрпНроЯро│рпИроХро│рпН:*\nтАв \"ро╡роХрпИроХро│рпН\" - роЕройрпИродрпНродрпБ рокрпКро░рпБроЯрпНроХро│рпБроорпН\nтАв \"родрпЗроЯро▓рпН [рокрпКро░рпБро│рпН]\" - роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокрпКро░рпБроЯрпНроХро│рпН\nтАв \"роЙродро╡ро┐\" - роЙродро╡ро┐ рокрпЖро▒рпБроЩрпНроХро│рпН\n\nроЗройрпНро▒рпБ роиро╛ройрпН роОройрпНрой роЙродро╡ роорпБроЯро┐ропрпБроорпН?",
    thanksResponse: "роиро▓рпНро╡ро░ро╡рпБ! ЁЯШК\n\nроЪро┐ро▒роирпНрод рокрпКро░рпБроЯрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐роп роиро╛ройрпН роОрокрпНрокрпЛродрпБроорпН роЗроЩрпНроХрпЗ роЙро│рпНро│рпЗройрпН. ро╡рпЗро▒рпБ роПродро╛ро╡родрпБ роХрпЗро│рпБроЩрпНроХро│рпН!",
    noResults: "тЭМ \"{query}\"-роХрпНроХрпБ рокрпКро░рпБроЯрпНроХро│рпН роЗро▓рпНро▓рпИ\n\nЁЯТб *роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН:*\nтАв ро╡рпЗро▒рпБ ро╡ро╛ро░рпНродрпНродрпИроХро│рпН\nтАв роОро┤рпБродрпНродрпБрокрпНрокро┐ро┤рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН\nтАв \"ро╡роХрпИроХро│рпН\" рокро╛ро░рпНроХрпНроХро╡рпБроорпН\nтАв \"роЙродро╡ро┐\" роХрпЗроЯрпНроХро╡рпБроорпН",
    help: "ЁЯдЦ *роОрокрпНрокроЯро┐ роЙродро╡ роорпБроЯро┐ропрпБроорпН?*\n\nЁЯЫТ *ро╖ро╛рокрпНрокро┐роЩрпН:*\nтАв ро╡роХрпИроХро│рпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН\nтАв рокрпКро░рпБроЯрпНроХро│рпН родрпЗроЯро╡рпБроорпН\nтАв ро╡ро┐ро▓рпИ рокрпЖро▒ро╡рпБроорпН\nтАв роЖро░рпНроЯро░рпН роЪрпЖропрпНропро╡рпБроорпН",
    categories: "ЁЯУВ *роОроЩрпНроХро│рпН ро╡роХрпИроХро│рпН:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв ро╡ро┐ро▓рпИ: тВ╣{price}\nтАв ро╡роХрпИ: {category}\nтАв роХрпБро▒ро┐ропрпАроЯрпБ: #{id}\n\nЁЯЫТ роХро╛ро░рпНроЯрпНроЯро┐ро▓рпН роЪрпЗро░рпНроХрпНроХ \"*{name} роЪрпЗро░рпН*\" роОройрпНро▒рпБ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН",
    searchResults: "ЁЯФН \"{query}\"-роХрпНроХрпБ {count} рокрпКро░рпБроЯрпНроХро│рпН роХро┐роЯрпИродрпНродрой:",
    cart: "ЁЯЫТ *роЙроЩрпНроХро│рпН роХро╛ро░рпНроЯрпН:*\n\n{items}\n\nЁЯТ░ *роорпКродрпНродроорпН: тВ╣{total}*\n\nроЖро░рпНроЯро░рпН роЪрпЖропрпНроп \"*роЪрпЖроХрпНроЕро╡рпБроЯрпН*\" роОройрпНро▒рпБ рокродро┐ро▓ро│ро┐роХрпНроХро╡рпБроорпН",
    orderPlaced: "тЬЕ *роЖро░рпНроЯро░рпН роЙро▒рпБродро┐!*\n\nроЖро░рпНроЯро░рпН роРроЯро┐: #{orderId}\nроорпКродрпНродроорпН: тВ╣{total}\n\nроЯрпЖро▓ро┐ро╡ро░ро┐ ро╡ро┐ро╡ро░роЩрпНроХро│рпБроХрпНроХрпБ ро╡ро┐ро░рпИро╡ро┐ро▓рпН родрпКроЯро░рпНрокрпБ роХрпКро│рпНро╡рпЛроорпН! ЁЯУЮ",
    unknownQuery: "ЁЯдФ роЕродрпБ роЪро░ро┐ропро╛роХ рокрпБро░ро┐ропро╡ро┐ро▓рпНро▓рпИ.\n\nЁЯТб *роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН:*\nтАв \"ро╡роХрпИроХро│рпН\" - рокрпКро░рпБроЯрпНроХро│рпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН\nтАв \"роЙродро╡ро┐\" - роЙродро╡ро┐ рокрпЖро▒рпБроЩрпНроХро│рпН\nтАв \"родрпЗроЯро▓рпН [рокрпКро░рпБро│рпН рокрпЖропро░рпН]\" - рокрпКро░рпБроЯрпНроХро│рпИроХрпН роХрогрпНроЯро▒ро┐ропрпБроЩрпНроХро│рпН\n\nроирпАроЩрпНроХро│рпН роОродрпИродрпН родрпЗроЯрпБроХро┐ро▒рпАро░рпНроХро│рпН?"
  },
  te: {
    welcome: "ЁЯЫНя╕П *р░░р▒Лр░Ьр▒Н р░Хр▒Жр░ор░┐р░Хр░▓р▒Нр░╕р▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!*\n\nр░ор▒А р░Зр░╖р▒Нр░Яр░ор▒Ир░и р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐:",
    languageMenu: "ЁЯМР *р░нр░╛р░╖ р░Ор░Вр░кр░┐р░Х:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nр░╕р░Вр░Цр▒Нр░пр░др▒Л р░Ьр░╡р░╛р░мр▒Б р░Зр░╡р▒Нр░╡р░Вр░бр░┐ (1-6)",
    greeting: "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! ЁЯЫНя╕П р░░р▒Лр░Ьр▒Н р░Хр▒Жр░ор░┐р░Хр░▓р▒Нр░╕р▒НтАМр░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!\n\nтЬи *р░ор░╛ р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б:*\nтАв р░░р░╕р░╛р░пр░ир░╛р░▓р▒Б & р░ор▒Бр░бр░┐р░╕р░░р▒Бр░Хр▒Бр░▓р▒Б\nтАв р░╢р▒Бр░нр▒Нр░░р░кр░░р░┐р░Ър▒З р░╡р░╕р▒Нр░др▒Бр░╡р▒Бр░▓р▒Б\nтАв р░╕р▒Бр░Чр░Вр░з р░жр▒Нр░░р░╡р▒Нр░пр░╛р░▓р▒Б\nтАв р░мр▒Нр░░р░╖р▒НтАМр░▓р▒Б & р░кр░░р░┐р░Хр░░р░╛р░▓р▒Б\n\nЁЯФН *р░Ер░бр░Чр░╡р░Ър▒Нр░Ър▒Б:*\nтАв \"р░╢р▒Бр░нр▒Нр░░р░кр░░р░┐р░Ър▒З р░╡р░╕р▒Нр░др▒Бр░╡р▒Бр░▓р▒Б р░Ър▒Вр░кр░┐р░Вр░Ър▒Б\"\nтАв \"р░Ор░╕р░┐р░Яр░┐р░Хр▒Н р░пр░╛р░╕р░┐р░бр▒Н р░зр░░ р░Ор░Вр░д?\"\nтАв \"р░╕р▒Бр░Чр░Вр░з р░жр▒Нр░░р░╡р▒Нр░пр░╛р░▓р▒Б\"\nтАв \"р░╡р░░р▒Нр░Чр░╛р░▓р▒Б\"",
    noResults: "тЭМ \"{query}\" р░Хр▒Лр░╕р░В р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б р░▓р▒Зр░╡р▒Б\n\nЁЯТб *р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐:*\nтАв р░╡р▒Зр░░р▒З р░кр░жр░╛р░▓р▒Б\nтАв р░╕р▒Нр░кр▒Жр░▓р▒Нр░▓р░┐р░Вр░Чр▒Н р░Ър▒Вр░бр░Вр░бр░┐\nтАв \"р░╡р░░р▒Нр░Чр░╛р░▓р▒Б\" р░Ър▒Вр░бр░Вр░бр░┐\nтАв \"р░╕р░╣р░╛р░пр░В\" р░Ер░бр░Чр░Вр░бр░┐",
    help: "ЁЯдЦ *р░Ор░▓р░╛ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б?*\n\nЁЯЫТ *р░╖р░╛р░кр░┐р░Вр░Чр▒Н:*\nтАв р░╡р░░р▒Нр░Чр░╛р░▓р▒Б р░Ър▒Вр░бр░Вр░бр░┐\nтАв р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б р░╡р▒Жр░др░Хр░Вр░бр░┐\nтАв р░зр░░р░▓р▒Б р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐\nтАв р░Жр░░р▒Нр░бр░░р▒Н р░Ър▒Зр░пр░Вр░бр░┐",
    categories: "ЁЯУВ *р░ор░╛ р░╡р░░р▒Нр░Чр░╛р░▓р▒Б:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв р░зр░░: тВ╣{price}\nтАв р░╡р░░р▒Нр░Чр░В: {category}\nтАв р░Хр▒Лр░бр▒Н: #{id}\n\nЁЯЫТ р░Хр░╛р░░р▒Нр░Яр▒НтАМр░Хр▒Б р░Ьр▒Лр░бр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ \"*{name} р░Ьр▒Лр░бр░┐р░Вр░Ър▒Б*\" р░Ер░ир░┐ р░░р░┐р░кр▒Нр░▓р▒И р░Ър▒Зр░пр░Вр░бр░┐",
    searchResults: "ЁЯФН \"{query}\" р░Хр▒Лр░╕р░В {count} р░Йр░др▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б р░жр▒Кр░░р░┐р░Хр░╛р░пр░┐:",
    cart: "ЁЯЫТ *р░ор▒А р░Хр░╛р░░р▒Нр░Яр▒Н:*\n\n{items}\n\nЁЯТ░ *р░ор▒Кр░др▒Нр░др░В: тВ╣{total}*\n\nр░Жр░░р▒Нр░бр░░р▒Н р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ \"*р░Ър▒Жр░Хр▒Нр░Ер░╡р▒Бр░Яр▒Н*\" р░Ер░ир░┐ р░░р░┐р░кр▒Нр░▓р▒И р░Ър▒Зр░пр░Вр░бр░┐",
    orderPlaced: "тЬЕ *р░Жр░░р▒Нр░бр░░р▒Н р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐!*\n\nр░Жр░░р▒Нр░бр░░р▒Н ID: #{orderId}\nр░ор▒Кр░др▒Нр░др░В: тВ╣{total}\n\nр░бр▒Жр░▓р░┐р░╡р░░р▒А р░╡р░┐р░╡р░░р░╛р░▓ р░Хр▒Лр░╕р░В р░др▒Нр░╡р░░р░▓р▒Л р░╕р░Вр░кр▒Нр░░р░жр░┐р░╕р▒Нр░др░╛р░ор▒Б! ЁЯУЮ"
  },
  kn: {
    welcome: "ЁЯЫНя╕П *р▓░р│Лр▓╕р│Н р▓Хр│Жр▓ор▓┐р▓Хр▓▓р│Нр▓╕р│НтАМр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д!*\n\nр▓ир▓┐р▓ор│Нр▓о р▓Жр▓жр│Нр▓пр▓др│Жр▓п р▓нр▓╛р▓╖р│Жр▓пр▓ир│Нр▓ир│Б р▓Жр▓пр│Нр▓Хр│Жр▓ор▓╛р▓бр▓┐:",
    languageMenu: "ЁЯМР *р▓нр▓╛р▓╖р│Ж р▓Жр▓пр│Нр▓Хр│Ж:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nр▓╕р▓Вр▓Цр│Нр▓пр│Жр▓пр│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐ (1-6)",
    greeting: "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! ЁЯЫНя╕П р▓░р│Лр▓╕р│Н р▓Хр│Жр▓ор▓┐р▓Хр▓▓р│Нр▓╕р│НтАМр▓Чр│Ж р▓╕р│Нр▓╡р▓╛р▓Чр▓д!\n\nтЬи *р▓ир▓ор│Нр▓о р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б:*\nтАв р▓░р▓╕р▓╛р▓пр▓ир▓Чр▓│р│Б & р▓Хр▓Ър│Нр▓Ър▓╛ р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р│Б\nтАв р▓╕р│Нр▓╡р▓Ър│Нр▓Ыр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡ р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р│Б\nтАв р▓╕р│Бр▓Чр▓Вр▓з р▓жр│Нр▓░р▓╡р│Нр▓пр▓Чр▓│р│Б\nтАв р▓мр│Нр▓░р▓╖р│НтАМр▓Чр▓│р│Б & р▓Йр▓кр▓Хр▓░р▓гр▓Чр▓│р│Б\n\nЁЯФН *р▓Хр│Зр▓│р▓мр▓╣р│Бр▓жр│Б:*\nтАв \"р▓╕р│Нр▓╡р▓Ър│Нр▓Ыр▓Чр│Кр▓│р▓┐р▓╕р│Бр▓╡ р▓╡р▓╕р│Нр▓др│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓др│Лр▓░р▓┐р▓╕р▓┐\"\nтАв \"р▓Ер▓╕р▓┐р▓Яр▓┐р▓Хр│Н р▓Жр▓╕р▓┐р▓бр│Н р▓мр│Жр▓▓р│Ж р▓Ор▓╖р│Нр▓Яр│Б?\"\nтАв \"р▓╕р│Бр▓Чр▓Вр▓з р▓жр│Нр▓░р▓╡р│Нр▓пр▓Чр▓│р│Б\"\nтАв \"р▓╡р▓┐р▓нр▓╛р▓Чр▓Чр▓│р│Б\"",
    noResults: "тЭМ \"{query}\" р▓Чр▓╛р▓Чр▓┐ р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б р▓Зр▓▓р│Нр▓▓\n\nЁЯТб *р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐:*\nтАв р▓мр│Зр▓░р│Ж р▓кр▓жр▓Чр▓│р│Б\nтАв р▓Хр▓╛р▓Чр│Бр▓гр▓┐р▓д р▓кр▓░р▓┐р▓╢р│Ар▓▓р▓┐р▓╕р▓┐\nтАв \"р▓╡р▓┐р▓нр▓╛р▓Чр▓Чр▓│р│Б\" р▓ир│Лр▓бр▓┐\nтАв \"р▓╕р▓╣р▓╛р▓п\" р▓Хр│Зр▓│р▓┐",
    help: "ЁЯдЦ *р▓╣р│Зр▓Чр│Ж р▓╕р▓╣р▓╛р▓п р▓ор▓╛р▓бр▓мр▓╣р│Бр▓жр│Б?*\n\nЁЯЫТ *р▓╢р▓╛р▓кр▓┐р▓Вр▓Чр│Н:*\nтАв р▓╡р▓┐р▓нр▓╛р▓Чр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓┐\nтАв р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р▓ир│Нр▓ир│Б р▓╣р│Бр▓бр│Бр▓Хр▓┐\nтАв р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр▓бр│Жр▓пр▓┐р▓░р▓┐\nтАв р▓Жр▓░р│Нр▓бр▓░р│Н р▓ор▓╛р▓бр▓┐",
    categories: "ЁЯУВ *р▓ир▓ор│Нр▓о р▓╡р▓┐р▓нр▓╛р▓Чр▓Чр▓│р│Б:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв р▓мр│Жр▓▓р│Ж: тВ╣{price}\nтАв р▓╡р▓┐р▓нр▓╛р▓Ч: {category}\nтАв р▓Хр│Лр▓бр│Н: #{id}\n\nЁЯЫТ р▓Хр▓╛р▓░р│Нр▓Яр│НтАМр▓Чр│Ж р▓╕р│Зр▓░р▓┐р▓╕р▓▓р│Б \"*{name} р▓╕р│Зр▓░р▓┐р▓╕р▓┐*\" р▓Ор▓Вр▓жр│Б р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐",
    searchResults: "ЁЯФН \"{query}\" р▓Чр▓╛р▓Чр▓┐ {count} р▓Йр▓др│Нр▓кр▓ир│Нр▓ир▓Чр▓│р│Б р▓╕р▓┐р▓Хр│Нр▓Хр▓┐р▓╡р│Ж:",
    cart: "ЁЯЫТ *р▓ир▓┐р▓ор│Нр▓о р▓Хр▓╛р▓░р│Нр▓Яр│Н:*\n\n{items}\n\nЁЯТ░ *р▓Тр▓Яр│Нр▓Яр│Б: тВ╣{total}*\n\nр▓Жр▓░р│Нр▓бр▓░р│Н р▓ор▓╛р▓бр▓▓р│Б \"*р▓Ър│Жр▓Хр│НтАМр▓Фр▓Яр│Н*\" р▓Ор▓Вр▓жр│Б р▓Йр▓др│Нр▓др▓░р▓┐р▓╕р▓┐",
    orderPlaced: "тЬЕ *р▓Жр▓░р│Нр▓бр▓░р│Н р▓жр│Гр▓вр│Ар▓Хр▓░р▓┐р▓╕р▓▓р▓╛р▓Чр▓┐р▓жр│Ж!*\n\nр▓Жр▓░р│Нр▓бр▓░р│Н ID: #{orderId}\nр▓Тр▓Яр│Нр▓Яр│Б: тВ╣{total}\n\nр▓бр│Жр▓▓р▓┐р▓╡р▓░р▓┐ р▓╡р▓┐р▓╡р▓░р▓Чр▓│р▓┐р▓Чр▓╛р▓Чр▓┐ р▓╢р│Ар▓Шр│Нр▓░р▓╡р│З р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р│Бр▓др│Нр▓др│Зр▓╡р│Ж! ЁЯУЮ"
  },
  ml: {
    welcome: "ЁЯЫНя╕П *р┤▒р╡Лр┤╕р╡Н р┤Хр╡Жр┤ор┤┐р┤Хр╡Нр┤Хр╡╜р┤╕р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В!*\n\nр┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Зр┤╖р╡Нр┤Яр┤ор╡Бр┤│р╡Нр┤│ р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤Хр╡Нр┤Хр╡Бр┤Х:",
    languageMenu: "ЁЯМР *р┤нр┤╛р┤╖ р┤др┤┐р┤░р┤Юр╡Нр┤Юр╡Жр┤Яр╡Бр┤кр╡Нр┤кр╡Н:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nр┤╕р┤Вр┤Цр╡Нр┤пр┤пр╡Лр┤Яр╡Ж р┤ор┤▒р╡Бр┤кр┤Яр┤┐ р┤ир╡╜р┤Хр╡Бр┤Х (1-6)",
    greeting: "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! ЁЯЫНя╕П р┤▒р╡Лр┤╕р╡Н р┤Хр╡Жр┤ор┤┐р┤Хр╡Нр┤Хр╡╜р┤╕р┤┐р┤▓р╡Зр┤Хр╡Нр┤Хр╡Н р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В!\n\nтЬи *р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛:*\nтАв р┤░р┤╛р┤╕р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр┤│р╡Бр┤В р┤Ер┤╕р┤Вр┤╕р╡Нр┤Хр╡Гр┤д р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр┤│р╡Бр┤В\nтАв р┤╡р╡Гр┤др╡Нр┤др┤┐р┤пр┤╛р┤Хр╡Нр┤Хр╡╜ р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛\nтАв р┤кр┤░р┤┐р┤ор┤│р┤жр╡Нр┤░р┤╡р╡Нр┤пр┤Щр╡Нр┤Щр╡╛\nтАв р┤мр╡Нр┤░р┤╖р╡Бр┤Хр┤│р╡Бр┤В р┤Йр┤кр┤Хр┤░р┤гр┤Щр╡Нр┤Щр┤│р╡Бр┤В\n\nЁЯФН *р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр┤╛р┤В:*\nтАв \"р┤╡р╡Гр┤др╡Нр┤др┤┐р┤пр┤╛р┤Хр╡Нр┤Хр╡╜ р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛ р┤Хр┤╛р┤гр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х\"\nтАв \"р┤Ер┤╕р┤┐р┤▒р╡Нр┤▒р┤┐р┤Хр╡Н р┤Жр┤╕р┤┐р┤бр┤┐р┤ир╡Нр┤▒р╡Ж р┤╡р┤┐р┤▓ р┤Ор┤ир╡Нр┤др┤╛р┤гр╡Н?\"\nтАв \"р┤╕р╡Бр┤Чр┤ир╡Нр┤зр┤жр╡Нр┤░р┤╡р╡Нр┤пр┤Щр╡Нр┤Щр╡╛\"\nтАв \"р┤╡р┤┐р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛\"",
    noResults: "тЭМ \"{query}\" р┤ир┤╛р┤пр┤┐ р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛ р┤Зр┤▓р╡Нр┤▓\n\nЁЯТб *р┤╢р╡Нр┤░р┤ор┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:*\nтАв р┤╡р╡Нр┤пр┤др╡Нр┤пр┤╕р╡Нр┤д р┤кр┤жр┤Щр╡Нр┤Щр╡╛\nтАв р┤Ер┤Хр╡Нр┤╖р┤░р┤др╡Нр┤др╡Жр┤▒р╡Нр┤▒р╡Н р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х\nтАв \"р┤╡р┤┐р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛\" р┤Хр┤╛р┤гр╡Бр┤Х\nтАв \"р┤╕р┤╣р┤╛р┤пр┤В\" р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х",
    help: "ЁЯдЦ *р┤Ор┤Щр╡Нр┤Щр┤ир╡Ж р┤╕р┤╣р┤╛р┤пр┤┐р┤Хр╡Нр┤Хр┤╛р╡╗ р┤Хр┤┤р┤┐р┤пр╡Бр┤В?*\n\nЁЯЫТ *р┤╖р╡Лр┤кр╡Нр┤кр┤┐р┤Вр┤Чр╡Н:*\nтАв р┤╡р┤┐р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛ р┤Хр┤╛р┤гр╡Бр┤Х\nтАв р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛ р┤др┤┐р┤░р┤пр╡Бр┤Х\nтАв р┤╡р┤┐р┤▓р┤Хр╡╛ р┤ир╡Зр┤Яр╡Бр┤Х\nтАв р┤Ур╡╝р┤бр╡╝ р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х",
    categories: "ЁЯУВ *р┤Юр┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤╡р┤┐р┤нр┤╛р┤Чр┤Щр╡Нр┤Щр╡╛:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв р┤╡р┤┐р┤▓: тВ╣{price}\nтАв р┤╡р┤┐р┤нр┤╛р┤Чр┤В: {category}\nтАв р┤Хр╡Лр┤бр╡Н: #{id}\n\nЁЯЫТ р┤Хр┤╛р╡╝р┤Яр╡Нр┤Яр┤┐р╡╜ р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр┤╛р╡╗ \"*{name} р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х*\" р┤Ор┤ир╡Нр┤ир╡Н р┤ор┤▒р╡Бр┤кр┤Яр┤┐ р┤ир╡╜р┤Хр╡Бр┤Х",
    searchResults: "ЁЯФН \"{query}\" р┤ир┤╛р┤пр┤┐ {count} р┤Йр╡╜р┤кр╡Нр┤кр┤ир╡Нр┤ир┤Щр╡Нр┤Щр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤┐:",
    cart: "ЁЯЫТ *р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр┤╛р╡╝р┤Яр╡Нр┤Яр╡Н:*\n\n{items}\n\nЁЯТ░ *р┤Жр┤Хр╡Ж: тВ╣{total}*\n\nр┤Ур╡╝р┤бр╡╝ р┤Ър╡Жр┤пр╡Нр┤пр┤╛р╡╗ \"*р┤Ър╡Жр┤Хр╡Нр┤Хр╡Нр┤Фр┤Яр╡Нр┤Яр╡Н*\" р┤Ор┤ир╡Нр┤ир╡Н р┤ор┤▒р╡Бр┤кр┤Яр┤┐ р┤ир╡╜р┤Хр╡Бр┤Х",
    orderPlaced: "тЬЕ *р┤Ур╡╝р┤бр╡╝ р┤╕р╡Нр┤ер┤┐р┤░р╡Ар┤Хр┤░р┤┐р┤Ър╡Нр┤Ър╡Б!*\n\nр┤Ур╡╝р┤бр╡╝ ID: #{orderId}\nр┤Жр┤Хр╡Ж: тВ╣{total}\n\nр┤бр╡Жр┤▓р┤┐р┤╡р┤▒р┤┐ р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛р┤Хр╡Нр┤Хр┤╛р┤пр┤┐ р┤Йр┤Яр╡╗ р┤мр┤ир╡Нр┤зр┤кр╡Нр┤кр╡Жр┤Яр╡Бр┤В! ЁЯУЮ"
  },
  hi: {
    welcome: "ЁЯЫНя╕П *рд░реЛрдЬрд╝ рдХреЗрдорд┐рдХрд▓реНрд╕ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!*\n\nрдХреГрдкрдпрд╛ рдЕрдкрдиреА рдкрд╕рдВрджреАрджрд╛ рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
    languageMenu: "ЁЯМР *рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:*\n\n1я╕ПтГг English\n2я╕ПтГг родрооро┐ро┤рпН (Tamil)\n3я╕ПтГг р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)\n4я╕ПтГг р▓Хр▓ир│Нр▓ир▓б (Kannada)\n5я╕ПтГг р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)\n6я╕ПтГг рд╣рд┐рдВрджреА (Hindi)\n\nрдирдВрдмрд░ рдХреЗ рд╕рд╛рде рдЬрд╡рд╛рдм рджреЗрдВ (1-6)",
    greeting: "рдирдорд╕реНрддреЗ! ЁЯЫНя╕П рд░реЛрдЬрд╝ рдХреЗрдорд┐рдХрд▓реНрд╕ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!\n\nтЬи *рд╣рдорд╛рд░реЗ рдЙрддреНрдкрд╛рдж:*\nтАв рд░рд╕рд╛рдпрди рдФрд░ рдХрдЪреНрдЪреЗ рдорд╛рд▓\nтАв рд╕рдлрд╛рдИ рдХреЗ рдЙрддреНрдкрд╛рдж\nтАв рдЗрддреНрд░ рдФрд░ рд╕реБрдЧрдВрдз\nтАв рдмреНрд░рд╢ рдФрд░ рдЙрдкрдХрд░рдг\n\nЁЯФН *рдкреВрдЫ рд╕рдХрддреЗ рд╣реИрдВ:*\nтАв \"рд╕рдлрд╛рдИ рдХреЗ рдЙрддреНрдкрд╛рдж рджрд┐рдЦрд╛рдПрдВ\"\nтАв \"рдПрд╕рд┐рдЯрд┐рдХ рдПрд╕рд┐рдб рдХреА рдХреАрдордд рдХреНрдпрд╛ рд╣реИ?\"\nтАв \"рдЗрддреНрд░\"\nтАв \"рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ\"",
    noResults: "тЭМ \"{query}\" рдХреЗ рд▓рд┐рдП рдЙрддреНрдкрд╛рдж рдирд╣реАрдВ рдорд┐рд▓реЗ\n\nЁЯТб *рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ:*\nтАв рдЕрд▓рдЧ рд╢рдмреНрдж\nтАв рд╡рд░реНрддрдиреА рдЬрд╛рдВрдЪреЗрдВ\nтАв \"рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ\" рджреЗрдЦреЗрдВ\nтАв \"рд╕рд╣рд╛рдпрддрд╛\" рдорд╛рдВрдЧреЗрдВ",
    help: "ЁЯдЦ *рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?*\n\nЁЯЫТ *рдЦрд░реАрджрд╛рд░реА:*\nтАв рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ рджреЗрдЦреЗрдВ\nтАв рдЙрддреНрдкрд╛рдж рдЦреЛрдЬреЗрдВ\nтАв рдХреАрдорддреЗрдВ рдЬрд╛рдиреЗрдВ\nтАв рдСрд░реНрдбрд░ рдХрд░реЗрдВ",
    categories: "ЁЯУВ *рд╣рдорд╛рд░реА рд╢реНрд░реЗрдгрд┐рдпрд╛рдВ:*",
    priceInfo: "ЁЯТ░ *{name}*\n\nтАв рдХреАрдордд: тВ╣{price}\nтАв рд╢реНрд░реЗрдгреА: {category}\nтАв рдХреЛрдб: #{id}\n\nЁЯЫТ рдХрд╛рд░реНрдЯ рдореЗрдВ рдЬреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП \"*{name} рдЬреЛрдбрд╝реЗрдВ*\" рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ",
    searchResults: "ЁЯФН \"{query}\" рдХреЗ рд▓рд┐рдП {count} рдЙрддреНрдкрд╛рдж рдорд┐рд▓реЗ:",
    cart: "ЁЯЫТ *рдЖрдкрдХрд╛ рдХрд╛рд░реНрдЯ:*\n\n{items}\n\nЁЯТ░ *рдХреБрд▓: тВ╣{total}*\n\nрдСрд░реНрдбрд░ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП \"*рдЪреЗрдХрдЖрдЙрдЯ*\" рдХрд╛ рдЬрд╡рд╛рдм рджреЗрдВ",
    orderPlaced: "тЬЕ *рдСрд░реНрдбрд░ рдХреА рдкреБрд╖реНрдЯрд┐!*\n\nрдСрд░реНрдбрд░ ID: #{orderId}\nрдХреБрд▓: тВ╣{total}\n\nрдбрд┐рд▓реАрд╡рд░реА рд╡рд┐рд╡рд░рдг рдХреЗ рд▓рд┐рдП рдЬрд▓реНрдж рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВрдЧреЗ! ЁЯУЮ"
  }
};

// Session management functions
function getUserSession(phoneNumber) {
  if (!userSessions.has(phoneNumber)) {
    userSessions.set(phoneNumber, {
      language: null,
      cart: [],
      lastActivity: new Date(),
      isFirstMessage: true
    });
  }
  return userSessions.get(phoneNumber);
}

function updateUserSession(phoneNumber, updates) {
  const session = getUserSession(phoneNumber);
  Object.assign(session, updates, { lastActivity: new Date() });
  userSessions.set(phoneNumber, session);
}

function getTranslation(lang, key, vars = {}) {
  const translation = translations[lang] || translations.en;
  let text = translation[key] || translations.en[key] || key;
  
  // Replace variables in translation
  Object.keys(vars).forEach(varKey => {
    text = text.replace(`{${varKey}}`, vars[varKey]);
  });
  
  return text;
}

function detectLanguageFromNumber(message) {
  const langMap = {
    '1': 'en',
    '2': 'ta', 
    '3': 'te',
    '4': 'kn',
    '5': 'ml',
    '6': 'hi'
  };
  return langMap[message.trim()] || null;
}

// Message logging function
function logMessage(direction, from, to, body, messageId = null) {
  const timestamp = new Date().toISOString();
  const logEntry = {
    timestamp,
    direction, // 'incoming' or 'outgoing'
    from,
    to,
    body,
    messageId,
    bodyLength: body ? body.length : 0
  };
  
  console.log(`ЁЯУ▒ ${direction.toUpperCase()} MESSAGE:`, JSON.stringify(logEntry, null, 2));
  
  // Optional: Save to file for persistence
  try {
    const logFile = path.join(__dirname, 'message_logs.txt');
    fs.appendFileSync(logFile, JSON.stringify(logEntry) + '\n');
  } catch (error) {
    console.error('тЪая╕П Failed to write to log file:', error);
  }
}

// Helper function to detect language selection from number
function detectLanguageFromNumber(message) {
  const languageMap = {
    '1': 'en',
    '2': 'hi', 
    '3': 'bn',
    '4': 'ta',
    '5': 'te',
    '6': 'kn'
  };
  
  // Check if message is just a number
  const trimmed = message.trim();
  if (/^[1-6]$/.test(trimmed)) {
    return languageMap[trimmed];
  }
  
  // Check if message contains language keywords
  if (message.includes('english') || message.includes('1')) return 'en';
  if (message.includes('hindi') || message.includes('рд╣рд┐рдВрджреА') || message.includes('2')) return 'hi';
  if (message.includes('bengali') || message.includes('ржмрж╛ржВрж▓рж╛') || message.includes('3')) return 'bn';
  if (message.includes('tamil') || message.includes('родрооро┐ро┤рпН') || message.includes('4')) return 'ta';
  if (message.includes('telugu') || message.includes('р░др▒Жр░▓р▒Бр░Чр▒Б') || message.includes('5')) return 'te';
  if (message.includes('kannada') || message.includes('р▓Хр▓ир│Нр▓ир▓б') || message.includes('6')) return 'kn';
  
  return null;
}

// Enhanced intent recognition function with conversation detection
function detectIntent(message) {
  const msg = message.toLowerCase().trim();
  const words = msg.split(/\s+/);
  
  // Keywords for different intents
  const greetingKeywords = ['hi', 'hello', 'hey', 'hii', 'helo', 'good', 'morning', 'afternoon', 'evening', 'namaste', 'vanakkam', 'adaab', 'salaam'];
  const searchKeywords = ['have', 'show', 'find', 'get', 'need', 'want', 'looking', 'search', 'browse', 'available', 'sell', 'stock'];
  const priceKeywords = ['price', 'cost', 'rate', 'much', 'expensive', 'cheap', 'value', 'amount', 'daam', 'paisa'];
  const helpKeywords = ['help', 'assist', 'guide', 'support'];
  const thanksKeywords = ['thank', 'thanks', 'appreciate', 'great', 'good', 'nice', 'excellent', 'perfect'];
  
  // Conversation/Question keywords
  const questionKeywords = ['does', 'is', 'can', 'will', 'how', 'what', 'which', 'when', 'where', 'why', 
                           'color', 'colour', 'water', 'mix', 'dilute', 'use', 'safe', 'compatible',
                           'recipe', 'make', 'prepare', 'ingredients', 'steps', 'process',
                           'рдХреНрдпрд╛', 'рдХреИрд╕реЗ', 'рдХреМрди', 'рдХрдм', 'рдХрд╣рд╛рдБ', 'рд░рдВрдЧ', 'рдкрд╛рдиреА', 'рдорд┐рд▓рд╛', 'рдЙрдкрдпреЛрдЧ'];
  
  // Enhanced product terms for better detection
  const productTerms = [
    'acid', 'chemical', 'brush', 'cleaner', 'perfume', 'oil', 'powder', 
    'soap', 'detergent', 'fragrance', 'bottle', 'container', 'solution',
    'liquid', 'spray', 'cream', 'gel', 'paste', 'thinner', 'solvent',
    'fabric', 'conditioner', 'softener', 'dish', 'wash', 'floor', 
    'phenyl', 'compound', 'kit', 'ultra', 'smart'
  ];
  
  // DIY Kit specific terms
  const diyKitTerms = [
    'fabric conditioner', 'liquid detergent', 'dish wash', 'floor cleaner',
    'soap oil', 'phenyl compound', 'washing gel', 'cleaning kit'
  ];
  
  // Function to check if any keyword exists in message
  const hasKeyword = (keywords) => keywords.some(keyword => msg.includes(keyword));
  
  // Check if message contains DIY kit terms
  const hasDIYKitTerms = diyKitTerms.some(term => msg.includes(term));
  
  // Check if message is in question format
  const isQuestion = msg.includes('?') || 
                    msg.startsWith('do ') || 
                    msg.startsWith('can ') || 
                    msg.startsWith('is ') || 
                    msg.startsWith('are ') ||
                    msg.startsWith('what ') ||
                    msg.startsWith('where ') ||
                    msg.startsWith('how ') ||
                    msg.startsWith('does ');
  
  // Check for product indicators
  const hasProductTerms = productTerms.some(term => msg.includes(term));
  
  // Business/shopping terms
  const businessTerms = ['buy', 'purchase', 'order', 'deliver', 'quality', 'brand', 'size', 'quantity'];
  const hasBusinessTerms = businessTerms.some(term => msg.includes(term));
  
  console.log(`ЁЯФН Analyzing: "${msg}" | Question: ${isQuestion} | ProductTerms: ${hasProductTerms} | DIYKits: ${hasDIYKitTerms} | BusinessTerms: ${hasBusinessTerms}`);
  
  // GREETING DETECTION - Most specific first
  if (hasKeyword(greetingKeywords) && !hasKeyword(searchKeywords) && !hasProductTerms && !hasDIYKitTerms) {
    return { intent: 'greeting', entity: null };
  }
  
  // CONVERSATION/QUESTION DETECTION - Enhanced for recipes
  if (hasKeyword(questionKeywords) || isQuestion) {
    let entity = extractProductName(msg, questionKeywords.concat(['do', 'you', 'have', 'can', 'what', 'is', 'are', 'the', 'to']));
    return { intent: 'conversation', entity: entity };
  }
  
  // PRICE DETECTION 
  if (hasKeyword(priceKeywords)) {
    let entity = extractProductName(msg, priceKeywords.concat(['what', 'is', 'the', 'of', 'for', 'tell', 'me']));
    return { intent: 'price', entity: entity };
  }
  
  // DIRECT DIY KIT DETECTION - NEW: Handle direct product names
  if (hasDIYKitTerms) {
    let entity = msg; // Use the entire message as entity for DIY kits
    return { intent: 'search', entity: entity };
  }
  
  // SEARCH DETECTION - Very flexible
  if (hasKeyword(searchKeywords) || hasProductTerms || hasBusinessTerms) {
    let entity = extractProductName(msg, searchKeywords.concat(['do', 'you', 'me', 'any', 'some', 'i', 'we']));
    
    // If no clear entity but has product terms, use the product term
    if (!entity && hasProductTerms) {
      entity = productTerms.find(term => msg.includes(term));
    }
    
    // Last resort - use cleaned message
    if (!entity) {
      entity = msg.replace(/\b(do|you|have|can|i|get|show|me|what|is|are|the)\b/g, '').trim();
      if (entity.length < 2) entity = null;
    }
    
    return { intent: 'search', entity: entity };
  }
  
  // HELP DETECTION
  if (hasKeyword(helpKeywords)) {
    return { intent: 'help', entity: null };
  }
  
  // THANKS DETECTION
  if (hasKeyword(thanksKeywords)) {
    return { intent: 'thanks', entity: null };
  }
  
  // Enhanced fallback logic for product names
  if (words.length >= 1) {
    // Check if the message contains any known product terms
    if (hasProductTerms || words.length === 2) {
      return { intent: 'search', entity: msg };
    }
  }
  
  // Single word that might be a product
  if (words.length === 1 && words[0].length > 2) {
    return { intent: 'search', entity: words[0] };
  }
  
  return { intent: 'unknown', entity: null };
}

// Helper function to extract product name
function extractProductName(message, wordsToRemove) {
  let words = message.toLowerCase().split(/\s+/);
  
  // Remove common words including those passed in
  const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',
                     'can', 'you', 'show', 'me', 'some', 'any', 'what', 'are', 'is', 'do', 'have', 'got',
                     'find', 'get', 'need', 'want', 'looking', 'search', 'browse', 'available', 'sell', 'stock']
    .concat(wordsToRemove || []);
  
  words = words.filter(word => !stopWords.includes(word) && word.length > 1);
  
  return words.length > 0 ? words.join(' ') : null;
}

// Category patterns helper
function detectCategoryRequest(message) {
  const categoryPatterns = [
    /\b(categories|category|types|products|items|menu|options)\b/i,
    /what do you sell/i,
    /show.*all/i,
    /list.*products/i
  ];
  
  return categoryPatterns.some(pattern => pattern.test(message));
}

// Function to search for products using enhanced knowledge base
async function searchProducts(query) {
  try {
    console.log(`ЁЯФН Searching for: "${query}"`);
    
    // First, check the enhanced knowledge base for detailed information
    const knowledgeResponse = getProductKnowledge(query);
    if (knowledgeResponse) {
      console.log(`ЁЯза Found detailed knowledge for: "${query}"`);
      return {
        type: 'conversation',
        response: knowledgeResponse
      };
    }
    
    // Fallback to regular product search
    const results = await fallbackSearch(query);
    console.log(`ЁЯУК Found ${results.length} products in basic search`);
    
    return {
      type: 'search',
      results: results
    };
    
  } catch (error) {
    console.error('тЭМ Search error:', error);
    return { type: 'search', results: [] };
  }
}

// Function to handle product conversations using Sarvam-1
async function handleConversation(question, productContext = null) {
  try {
    console.log(`ЁЯТм Conversation for: "${question}"`);
    
    const response = await fetch('http://localhost:5000/conversation', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        question: question,
        product_context: productContext
      })
    });

    if (!response.ok) {
      throw new Error(`Conversation service error: ${response.status}`);
    }

    const data = await response.json();
    return data.response;
    
  } catch (error) {
    console.error('ЁЯЪл Conversation service error:', error);
    return getFallbackConversationResponse(question);
  }
}

// Get detailed product information from knowledge base
function getProductKnowledge(productName, questionType = null) {
  try {
    const productKey = productName.toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '_')
      .replace(/_+/g, '_');
    
    // Search in knowledge base
    for (const [key, product] of Object.entries(productsKnowledge.products_knowledge || {})) {
      if (key.includes(productKey) || 
          product.name.toLowerCase().includes(productName.toLowerCase()) ||
          (product.keywords && product.keywords.some(k => k.includes(productName.toLowerCase())))) {
        
        // Return specific information based on question type
        if (questionType) {
          return getSpecificKnowledge(product, questionType);
        }
        
        // Return general product info
        return formatProductKnowledge(product);
      }
    }
    
    return null;
  } catch (error) {
    console.error('Error searching knowledge base:', error);
    return null;
  }
}

// Get specific knowledge based on question type
function getSpecificKnowledge(product, questionType) {
  const qt = questionType.toLowerCase();
  
  if (qt.includes('recipe') || qt.includes('how to make') || qt.includes('prepare')) {
    return formatRecipe(product);
  }
  
  if (qt.includes('price') || qt.includes('cost')) {
    return formatPriceInfo(product);
  }
  
  if (qt.includes('ingredients') || qt.includes('what needed')) {
    return formatIngredients(product);
  }
  
  if (qt.includes('water') || qt.includes('mix') || qt.includes('ratio')) {
    return formatMixingInstructions(product);
  }
  
  if (qt.includes('color') || qt.includes('colours')) {
    return formatColorInfo(product);
  }
  
  if (qt.includes('time') || qt.includes('duration')) {
    return formatTimeInfo(product);
  }
  
  return formatProductKnowledge(product);
}

// Format complete recipe
function formatRecipe(product) {
  if (!product.recipe) return null;
  
  let response = `ЁЯзк **${product.name} Recipe**\n\n`;
  response += `ЁЯТ░ **Cost**: тВ╣${product.price.kit_price} (Makes ${product.price.yield})\n`;
  response += `тП▒я╕П **Time**: ${product.recipe.preparation_time}\n`;
  response += `ЁЯУК **Difficulty**: ${product.recipe.difficulty}\n\n`;
  
  response += "ЁЯУЛ **Step-by-step Instructions:**\n\n";
  
  product.recipe.steps.forEach(step => {
    response += `**Step ${step.step}: ${step.title}**\n`;
    response += `${step.instruction}\n`;
    if (step.tip) response += `ЁЯТб *Tip: ${step.tip}*\n`;
    response += `тП░ Time: ${step.time}\n\n`;
  });
  
  response += `тЬЕ **Final Result**: ${product.recipe.final_result}\n\n`;
  response += "тЭУ Need more details? Ask me about ingredients, equipment, or troubleshooting!";
  
  return response;
}

// Format price information
function formatPriceInfo(product) {
  if (!product.price) return null;
  
  let response = `ЁЯТ░ **${product.name} - Price Details**\n\n`;
  response += `ЁЯЫТ **Kit Price**: тВ╣${product.price.kit_price}\n`;
  response += `ЁЯУж **Yield**: ${product.price.yield}\n`;
  response += `ЁЯТз **Cost per Liter**: тВ╣${product.price.cost_per_liter}\n\n`;
  
  if (product.business_info) {
    response += `ЁЯУИ **Business Info**:\n`;
    response += `тАв Profit Margin: ${product.business_info.profit_margin}\n`;
    response += `тАв Market Demand: ${product.business_info.market_demand}\n`;
    response += `тАв Competition: ${product.business_info.competition}\n\n`;
  }
  
  response += "ЁЯТб Great for starting your own fabric conditioner business!";
  return response;
}

// Format ingredients
function formatIngredients(product) {
  if (!product.ingredients) return null;
  
  let response = `ЁЯзк **${product.name} - Required Items**\n\n`;
  
  response += "ЁЯУж **Ingredients:**\n";
  product.ingredients.forEach(ing => {
    const status = ing.included ? "тЬЕ" : "тЭЧ";
    response += `${status} ${ing.name} - ${ing.quantity}\n`;
    if (ing.note) response += `   тД╣я╕П ${ing.note}\n`;
  });
  
  if (product.equipment_needed) {
    response += "\nЁЯЫая╕П **Equipment Needed:**\n";
    product.equipment_needed.forEach(eq => {
      const status = eq.included ? "тЬЕ" : "тЭЧ";
      response += `${status} ${eq.name}`;
      if (eq.capacity) response += ` (${eq.capacity})`;
      if (eq.purpose) response += ` - ${eq.purpose}`;
      response += "\n";
    });
  }
  
  response += "\nЁЯТб Items marked with тЭЧ need to be arranged by you.";
  return response;
}

// Format mixing instructions
function formatMixingInstructions(product) {
  if (!product.recipe) return null;
  
  let response = `ЁЯТз **${product.name} - Water & Mixing Guide**\n\n`;
  
  // Find water-related steps
  const waterSteps = product.recipe.steps.filter(step => 
    step.instruction.toLowerCase().includes('water') || 
    step.instruction.toLowerCase().includes('mix')
  );
  
  if (waterSteps.length > 0) {
    response += "ЁЯМК **Water Requirements:**\n";
    waterSteps.forEach(step => {
      response += `тАв **${step.title}**: ${step.instruction}\n`;
      if (step.tip) response += `  ЁЯТб ${step.tip}\n`;
    });
  }
  
  // Add general water info
  const waterIngredient = product.ingredients.find(ing => 
    ing.name.toLowerCase().includes('water')
  );
  
  if (waterIngredient) {
    response += `\nЁЯУК **Total Water Needed**: ${waterIngredient.quantity}\n`;
  }
  
  response += "\nтЪая╕П Always use RO (purified) water for best results!";
  return response;
}

// Format color information
function formatColorInfo(product) {
  if (!product.recipe) return null;
  
  let response = `ЁЯМИ **${product.name} - Color Information**\n\n`;
  
  // Find color-related steps
  const colorSteps = product.recipe.steps.filter(step => 
    step.instruction.toLowerCase().includes('color') || 
    step.instruction.toLowerCase().includes('powder')
  );
  
  if (colorSteps.length > 0) {
    response += "ЁЯОи **Color Steps:**\n";
    colorSteps.forEach(step => {
      response += `тАв **${step.title}**: ${step.instruction}\n`;
      if (step.tip) response += `  ЁЯТб ${step.tip}\n`;
    });
  }
  
  // Check for color-related ingredients
  const colorIngredients = product.ingredients.filter(ing => 
    ing.name.toLowerCase().includes('color') || 
    ing.name.toLowerCase().includes('powder')
  );
  
  if (colorIngredients.length > 0) {
    response += "\nЁЯзк **Color Ingredients:**\n";
    colorIngredients.forEach(ing => {
      response += `тАв ${ing.name} - ${ing.quantity}\n`;
      if (ing.note) response += `  тД╣я╕П ${ing.note}\n`;
    });
  }
  
  response += "\nЁЯОи You can choose from various attractive colors for your fabric conditioner!";
  return response;
}

// Format time information
function formatTimeInfo(product) {
  if (!product.recipe) return null;
  
  let response = `тП░ **${product.name} - Time Guide**\n\n`;
  response += `ЁЯУК **Total Preparation Time**: ${product.recipe.preparation_time}\n\n`;
  
  response += "тП▒я╕П **Step-by-step Timing:**\n";
  product.recipe.steps.forEach(step => {
    response += `тАв **${step.title}**: ${step.time}\n`;
  });
  
  response += "\nЁЯТб **Important**: Follow timing carefully for best results!";
  return response;
}

// Format general product knowledge
function formatProductKnowledge(product) {
  let response = `ЁЯУЛ **${product.name}**\n\n`;
  response += `${product.description}\n\n`;
  
  if (product.price) {
    response += `ЁЯТ░ **Price**: тВ╣${product.price.kit_price} (Makes ${product.price.yield})\n\n`;
  }
  
  response += "тЭУ **Ask me about:**\n";
  response += "тАв Recipe and instructions\n";
  response += "тАв Ingredients needed\n";
  response += "тАв Water and mixing ratios\n";
  response += "тАв Price and business info\n";
  response += "тАв Troubleshooting tips\n\n";
  
  response += "ЁЯТм Try asking: *How to make fabric conditioner?* or *What ingredients needed?*";
  
  return response;
}

// Fallback conversation responses
function getFallbackConversationResponse(question) {
  const questionLower = question.toLowerCase();
  
  if (questionLower.includes('color') || questionLower.includes('colour') || questionLower.includes('рд░рдВрдЧ')) {
    return "рд╣рдорд╛рд░реЗ рдЙрддреНрдкрд╛рдж рд╡рд┐рднрд┐рдиреНрди рд░рдВрдЧреЛрдВ рдореЗрдВ рдЙрдкрд▓рдмреНрдз рд╣реИрдВред рдХреГрдкрдпрд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд░рдВрдЧ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рд╣рдорд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nOur products are available in various colors. Please contact us for specific color information.";
  }
  
  if (questionLower.includes('water') || questionLower.includes('mix') || questionLower.includes('рдкрд╛рдиреА')) {
    return "рдорд┐рд╢реНрд░рдг рдХреЗ рдЕрдиреБрдкрд╛рдд рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЙрддреНрдкрд╛рдж рд▓реЗрдмрд▓ рджреЗрдЦреЗрдВ рдпрд╛ рд╣рдорд╛рд░реА рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nFor mixing ratios, please check the product label or contact our team.";
  }
  
  if (questionLower.includes('use') || questionLower.includes('how') || questionLower.includes('рдЙрдкрдпреЛрдЧ')) {
    return "рдЙрдкрдпреЛрдЧ рдХреА рд╡рд┐рдзрд┐ рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЙрддреНрдкрд╛рдж рдХреЗ рдирд┐рд░реНрджреЗрд╢ рджреЗрдЦреЗрдВ рдпрд╛ рд╣рдорд╕реЗ рдкреВрдЫреЗрдВред\n\nFor usage instructions, please check the product directions or ask us.";
  }
  
  if (questionLower.includes('safe') || questionLower.includes('compatible') || questionLower.includes('рд╕реБрд░рдХреНрд╖рд┐рдд')) {
    return "рд╕реБрд░рдХреНрд╖рд╛ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рдЙрддреНрдкрд╛рдж рдХреА рд╕реБрд░рдХреНрд╖рд╛ рд╢реАрдЯ рджреЗрдЦреЗрдВ рдпрд╛ рд╣рдорд╛рд░реА рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nFor safety information, please check the product safety sheet or contact our team.";
  }
  
  return "рдЖрдкрдХреЗ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж! рд╡рд┐рд╕реНрддреГрдд рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реА рдХрд╕реНрдЯрдорд░ рд╕рд░реНрд╡рд┐рд╕ рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред\n\nThank you for your question! For detailed information, please contact our customer service team.";
}

// Fallback search function (original logic)
function fallbackSearch(query) {
  const results = [];
  let searchTerm = query.toLowerCase().trim();
  
  // Enhanced plural forms and common variations
  const pluralMappings = {
    'brushes': 'brush',
    'brooms': 'broom', 
    'detergents': 'detergent',
    'chemicals': 'chemical',
    'acids': 'acid',
    'soaps': 'soap',
    'phenyles': 'phenyl',
    'phenylees': 'phenyl',
    'bottles': 'bottle',
    'containers': 'container',
    'products': 'product',
    'cleaning products': 'cleaning',
    'cleaning': 'clean',
    'perfumes': 'perfume',
    'fragrances': 'fragrance',
    'scents': 'scent',
    'oils': 'oil',
    'liquids': 'liquid',
    'powders': 'powder',
    'cleaners': 'cleaner'
  };
  
  // Common synonyms and alternative names
  const synonymMappings = {
    'soap': ['detergent', 'washing', 'clean'],
    'acid': ['chemical', 'solution'],
    'phenyl': ['disinfectant', 'floor cleaner', 'antiseptic'],
    'perfume': ['fragrance', 'scent', 'attar'],
    'brush': ['cleaning tool', 'scrubber'],
    'broom': ['jhadu', 'sweeper'],
    'thickner': ['thickening', 'thick', 'viscosity'],
    'detergent': ['soap', 'washing powder', 'surf'],
    'cleaner': ['cleaning agent', 'clean'],
    'disinfectant': ['antiseptic', 'sanitizer', 'germicide']
  };
  
  // Check if the search term has a plural mapping
  const singularTerm = pluralMappings[searchTerm] || searchTerm;
  
  console.log(`ЁЯФН Fallback search for: "${searchTerm}" (mapped to: "${singularTerm}")`);
  
  for (const categoryKey in products.categories) {
    const category = products.categories[categoryKey];
    for (const product of category.products) {
      const productName = product.name.toLowerCase();
      let isMatch = false;
      
      // Check for exact match with original term or mapped term
      if (productName.includes(searchTerm) || productName.includes(singularTerm)) {
        isMatch = true;
      }
      
      // Check synonyms
      if (!isMatch && synonymMappings[searchTerm]) {
        for (const synonym of synonymMappings[searchTerm]) {
          if (productName.includes(synonym)) {
            isMatch = true;
            break;
          }
        }
      }
      
      // Check if any synonym maps to our search term
      if (!isMatch) {
        for (const [key, synonyms] of Object.entries(synonymMappings)) {
          if (synonyms.includes(searchTerm) && productName.includes(key)) {
            isMatch = true;
            break;
          }
        }
      }
      
      if (isMatch) {
        results.push({
          ...product,
          category: category.name
        });
      }
    }
  }
  
  console.log(`ЁЯФН Fallback found ${results.length} products for search term: "${searchTerm}"`);
  return results;
}

// Function to get all categories
function getCategories(language = 'en') {
    const categories = [];
    for (const categoryKey in products.categories) {
        const categoryName = products.categories[categoryKey].name;
        const translatedCategoryName = getTranslation(language, `category_${categoryKey}`, { default: categoryName });
        categories.push(`${categories.length + 1}. ${translatedCategoryName}`);
    }
    
    // Add translations for category names if they don't exist
    if (!translations[language].category_chemical_raw_materials) {
        translations.en.category_chemical_raw_materials = "Chemical - Raw Materials";
        translations.ta.category_chemical_raw_materials = "ро░роЪро╛ропрой - роорпВро▓рокрпНрокрпКро░рпБроЯрпНроХро│рпН";
        translations.te.category_chemical_raw_materials = "р░░р░╕р░╛р░пр░и - р░ор▒Бр░бр░┐ р░кр░жр░╛р░░р▒Нр░ер░╛р░▓р▒Б";
        translations.kn.category_chemical_raw_materials = "р▓░р▓╛р▓╕р▓╛р▓пр▓ир▓┐р▓Х - р▓Хр▓Ър│Нр▓Ър▓╛ р▓╕р▓╛р▓ор▓Чр│Нр▓░р▓┐р▓Чр▓│р│Б";
        translations.ml.category_chemical_raw_materials = "р┤░р┤╛р┤╕ - р┤Ер┤╕р┤Вр┤╕р╡Нр┤Хр╡Гр┤д р┤╡р┤╕р╡Нр┤др╡Бр┤Хр╡Нр┤Хр╡╛";
        translations.hi.category_chemical_raw_materials = "рд░рд╛рд╕рд╛рдпрдирд┐рдХ - рдХрдЪреНрдЪрд╛ рдорд╛рд▓";
    }

    return categories.join('\n');
}

// Add homepage route
app.get('/', (req, res) => {
  res.send(`
    <h1>WhatsApp Product Bot</h1>
    <p>Bot is running successfully! ЁЯОЙ</p>
    <p>Send messages to your WhatsApp number to interact with the bot.</p>
    <p>Available commands:</p>
    <ul>
      <li><strong>categories</strong> - View all product categories</li>
      <li><strong>search [product name]</strong> - Search for specific products</li>
      <li><strong>price [product name]</strong> - Get product price (inclusive of 18% GST)</li>
      <li><strong>help</strong> - Show available commands</li>
    </ul>
    <hr>
    <h3>Webhook Status</h3>
    <p>тЬЕ Server is ready to receive WhatsApp messages</p>
    <p>ЁЯУ▒ Webhook URL: <code>${req.protocol}://${req.get('host')}/whatsapp</code></p>
    <p>ЁЯФН Test webhook: <a href="/webhook-test">Run Test</a></p>
  `);
});

// Webhook verification endpoint (required by Twilio)
app.get('/whatsapp', (req, res) => {
  console.log('ЁЯФН Webhook verification request received');
  console.log('Query params:', req.query);
  
  // Respond with 200 for webhook verification
  res.status(200).send('Webhook verified successfully');
});

// Test endpoint for knowledge base
app.get('/test-knowledge', (req, res) => {
  const query = req.query.q || 'fabric conditioner';
  const questionType = req.query.type || null;
  
  console.log(`ЁЯзк Testing knowledge base with query: "${query}", type: "${questionType}"`);
  
  const result = getProductKnowledge(query, questionType);
  
  res.json({
    query: query,
    questionType: questionType,
    result: result,
    timestamp: new Date().toISOString()
  });
});

// Test endpoint for webhook validation
app.get('/webhook-test', (req, res) => {
  const testData = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    message: 'Webhook endpoint is working correctly',
    products_loaded: Object.keys(products).length > 0,
    total_products: Object.values(products.categories || {}).reduce((sum, category) => sum + (category.products?.length || 0), 0)
  };
  
  res.json(testData);
});

// WhatsApp webhook - Enhanced E-commerce Bot
app.post('/whatsapp', async (req, res) => {
  try {
    // Extract Twilio webhook data
    const {
      Body: messageBody,
      From: senderNumber,
      To: recipientNumber,
      MessageSid: messageId,
      ProfileName: senderName,
      WaId: whatsappId,
      NumMedia: mediaCount,
      MediaContentType0: mediaType,
      MediaUrl0: mediaUrl
    } = req.body;

    // Enhanced logging to debug
    console.log('\nЁЯФ╡ INCOMING WHATSAPP MESSAGE:');
    console.log('тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ');
    console.log(`ЁЯУ▒ From: ${senderNumber} (${senderName || 'Unknown'})`);
    console.log(`ЁЯУ▒ Message: "${messageBody}"`);
    console.log(`ЁЯХТ Timestamp: ${new Date().toISOString()}`);
    console.log(`ЁЯУД Full Request Body:`, JSON.stringify(req.body, null, 2));
    console.log('тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ');

    logMessage('incoming', senderNumber, recipientNumber, messageBody, messageId);

    // Validate message body
    if (!messageBody || messageBody.trim() === '') {
      const twiml = new MessagingResponse();
      twiml.message('I received your message, but it appears to be empty. Please send a text message to get started! ЁЯШК');
      logMessage('outgoing', recipientNumber, senderNumber, 'Empty message response');
      res.writeHead(200, { 'Content-Type': 'text/xml' });
      return res.end(twiml.toString());
    }

    // Handle media messages
    if (mediaCount > 0) {
      const twiml = new MessagingResponse();
      twiml.message('Thank you for sharing media! Currently, I can only process text messages. Please describe what you\'re looking for in text. ЁЯУЭ');
      logMessage('outgoing', recipientNumber, senderNumber, 'Media not supported response');
      res.writeHead(200, { 'Content-Type': 'text/xml' });
      return res.end(twiml.toString());
    }

    // Get user session
    const session = getUserSession(senderNumber);
    const twiml = new MessagingResponse();
    const incomingMessage = messageBody.toLowerCase().trim();
    let responseMessage = '';

    console.log(`ЁЯФД Processing message: "${incomingMessage}"`);
    console.log(`ЁЯСд User session: Language=${session.language}, First=${session.isFirstMessage}, Cart=${session.cart.length} items`);

    // For testing purposes, if message starts with "test:", skip language selection
    if (incomingMessage.startsWith('test:')) {
      const testMessage = incomingMessage.replace('test:', '').trim();
      if (!session.language) {
        updateUserSession(senderNumber, { language: 'en', isFirstMessage: false });
      }
      const { intent, entity } = detectIntent(testMessage);
      console.log(`ЁЯзк TEST MODE - Detected intent: "${intent}", entity: "${entity}"`);
      
      switch (intent) {
        case 'greeting':
          responseMessage = getTranslation(session.language, 'greetingResponse');
          break;
        case 'search':
          if (entity) {
            const results = await searchProducts(entity);
            if (results.length > 0) {
              responseMessage = getTranslation(session.language, 'searchResults', {
                count: results.length,
                query: entity
              }) + '\n\n';
              
              // Display all results
              results.forEach((product, index) => {
                responseMessage += `${index + 1}. *${product.name}*\n   ЁЯТ░ тВ╣${product.mrp} | ЁЯУВ ${product.category}\n   ЁЯЫТ Add: "*Add ${product.name}*"\n\n`;
              });
            } else {
              responseMessage = getTranslation(session.language, 'noResults', { query: entity });
            }
          }
          break;
        default:
          responseMessage = getTranslation(session.language, 'unknownQuery');
      }
    }
    // First time user - show language selection
    else if (session.isFirstMessage) {
      responseMessage = getTranslation('en', 'welcome') + '\n\n' + getTranslation('en', 'languageMenu');
      updateUserSession(senderNumber, { isFirstMessage: false });
    }
    // Language selection
    else if (!session.language) {
      const selectedLang = detectLanguageFromNumber(incomingMessage);
      if (selectedLang) {
        updateUserSession(senderNumber, { language: selectedLang });
        responseMessage = getTranslation(selectedLang, 'greeting');
      } else {
        responseMessage = getTranslation('en', 'languageMenu') + '\n\nтЪая╕П Please select a valid number (1-6)';
      }
    }
    // Handle cart commands
    else if (incomingMessage.startsWith('add ') || incomingMessage.includes('рдЬреЛрдбрд╝реЗрдВ') || incomingMessage.includes('роЪрпЗро░рпН') || incomingMessage.includes('р░Ьр▒Лр░бр░┐р░Вр░Ър▒Б') || incomingMessage.includes('р▓╕р│Зр▓░р▓┐р▓╕р▓┐') || incomingMessage.includes('р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х')) {
      // Extract product name for adding to cart
      let productName = incomingMessage.replace(/^add\s+/i, '').replace(/\s*(рдЬреЛрдбрд╝реЗрдВ|роЪрпЗро░рпН|р░Ьр▒Лр░бр░┐р░Вр░Ър▒Б|р▓╕р│Зр▓░р▓┐р▓╕р▓┐|р┤Ър╡Зр╡╝р┤Хр╡Нр┤Хр╡Бр┤Х)\s*$/i, '').trim();
      const results = await searchProducts(productName);
      
      if (results.length > 0) {
        const product = results[0];
        session.cart.push(product);
        updateUserSession(senderNumber, { cart: session.cart });
        
        responseMessage = `тЬЕ Added to cart: *${product.name}*\n\nЁЯЫТ Cart items: ${session.cart.length}\nЁЯТ░ Cart total: тВ╣${session.cart.reduce((sum, item) => sum + item.mrp, 0)}\n\nReply "*Cart*" to view cart or "*Checkout*" to place order`;
      } else {
        responseMessage = getTranslation(session.language, 'noResults', { query: productName });
      }
    }
    // View cart
    else if (/^(cart|рдХрд╛рд░реНрдЯ|роХро╛ро░рпНроЯрпН|р░Хр░╛р░░р▒Нр░Яр▒Н|р▓Хр▓╛р▓░р│Нр▓Яр│Н|р┤Хр┤╛р╡╝р┤Яр╡Нр┤Яр╡Н)$/i.test(incomingMessage)) {
      if (session.cart.length === 0) {
        responseMessage = 'ЁЯЫТ Your cart is empty!\n\nBrowse products and add items by saying "*Add [product name]*"';
      } else {
        const cartItems = session.cart.map((item, index) => 
          `${index + 1}. ${item.name}\n   Price: тВ╣${item.mrp}`
        ).join('\n\n');
        const total = session.cart.reduce((sum, item) => sum + item.mrp, 0);
        
        responseMessage = getTranslation(session.language, 'cart', {
          items: cartItems,
          total: total
        });
      }
    }
    // Checkout
    else if (/^(checkout|рдЪреЗрдХрдЖрдЙрдЯ|роЪрпЖроХрпНроЕро╡рпБроЯрпН|р░Ър▒Жр░Хр▒Нр░Ер░╡р▒Бр░Яр▒Н|р▓Ър│Жр▓Хр│НтАМр▓Фр▓Яр│Н|р┤Ър╡Жр┤Хр╡Нр┤Хр╡Нр┤Фр┤Яр╡Нр┤Яр╡Н)$/i.test(incomingMessage)) {
      if (session.cart.length === 0) {
        responseMessage = 'ЁЯЫТ Your cart is empty! Please add some products first.';
      } else {
        const orderId = Math.floor(Math.random() * 900000) + 100000;
        const total = session.cart.reduce((sum, item) => sum + item.mrp, 0);
        
        responseMessage = getTranslation(session.language, 'orderPlaced', {
          orderId: orderId,
          total: total
        });
        
        // Clear cart after order
        updateUserSession(senderNumber, { cart: [] });
      }
    }
    // Handle regular queries
    else {
      const { intent, entity } = detectIntent(incomingMessage);
      console.log(`ЁЯза Detected intent: "${intent}", entity: "${entity}"`);
      
      switch (intent) {
        case 'greeting':
          responseMessage = getTranslation(session.language, 'greetingResponse');
          break;
          
        case 'thanks':
          responseMessage = getTranslation(session.language, 'thanksResponse');
          break;
          
        case 'price':
          if (entity) {
            const results = await searchProducts(entity);
            if (results.length > 0) {
              const product = results[0];
              responseMessage = getTranslation(session.language, 'priceInfo', {
                name: product.name,
                price: product.mrp,
                category: product.category,
                id: product.id
              });
            } else {
              responseMessage = getTranslation(session.language, 'noResults', { query: entity });
            }
          } else {
            responseMessage = getTranslation(session.language, 'help');
          }
          break;
          
        case 'search':
          if (entity) {
            // First check knowledge base for detailed information
            const knowledgeResponse = getProductKnowledge(entity, incomingMessage);
            
            if (knowledgeResponse) {
              responseMessage = knowledgeResponse;
            } else {
              // Fallback to regular product search
              const searchResult = await searchProducts(entity);
              
              if (searchResult.type === 'conversation') {
                // Handle conversation response
                responseMessage = searchResult.response;
              } else if (searchResult.results && searchResult.results.length > 0) {
                // Handle search results
                const results = searchResult.results;
                responseMessage = getTranslation(session.language, 'searchResults', {
                  count: results.length,
                  query: entity
                }) + '\n\n';
                
                // Show all results (as requested)
                results.forEach((product, index) => {
                  responseMessage += `${index + 1}. *${product.name}*\n   ЁЯТ░ тВ╣${product.mrp} | ЁЯУВ ${product.category}\n   ЁЯЫТ Add: "*Add ${product.name}*"\n\n`;
                });
                
                if (results.length > 10) {
                  responseMessage += `ЁЯУЛ *Showing all ${results.length} results*\n\nЁЯТб *Tip:* Use more specific keywords to narrow your search.`;
                }
              } else {
                responseMessage = getTranslation(session.language, 'noResults', { query: entity });
              }
            }
          } else {
            responseMessage = getTranslation(session.language, 'help');
          }
          break;
          
        case 'conversation':
          // Handle product questions and conversations
          if (entity) {
            // First check knowledge base for detailed information
            const knowledgeResponse = getProductKnowledge(entity, incomingMessage);
            
            if (knowledgeResponse) {
              responseMessage = knowledgeResponse;
            } else {
              responseMessage = await handleConversation(incomingMessage, entity);
            }
            // Store last searched product for context
            updateUserSession(senderNumber, { lastSearchedProduct: entity });
          } else {
            responseMessage = getFallbackConversationResponse(incomingMessage);
          }
          break;
          
        case 'categories':
          responseMessage = getTranslation(session.language, 'categories') + '\n\n' + getCategories(session.language);
          break;
          
        case 'help':
          responseMessage = getTranslation(session.language, 'help');
          break;
          
        case 'unknown':
        default:
          responseMessage = getTranslation(session.language, 'unknownQuery');
          break;
      }
    }

    // Always ensure we have a response
    if (!responseMessage || responseMessage.trim() === '') {
      responseMessage = getTranslation(session.g.language || 'en', 'help');
    }
    
    console.log(`\nЁЯЯв OUTGOING RESPONSE (${session.language || 'en'}):`);
    console.log('тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ');
    console.log(`ЁЯУд Response: "${responseMessage}"`);
    console.log('тФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБтФБ\n');
    
    logMessage('outgoing', recipientNumber, senderNumber, responseMessage);
    
    twiml.message(responseMessage);
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
    
  } catch (error) {
    console.error('\nтЭМ ERROR processing WhatsApp message:', error);
    
    const twiml = new MessagingResponse();
    twiml.message('Sorry, I encountered an error. Please try again or contact support. ЁЯЩП');
    
    res.writeHead(200, { 'Content-Type': 'text/xml' });
    res.end(twiml.toString());
  }
});

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log('\nЁЯЪА WhatsApp Bot Server Starting...');
  console.log('тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР');
  console.log(`ЁЯМР Server running on port ${PORT}`);
  console.log(`ЁЯФЧ Local URL: http://localhost:${PORT}`);
  console.log(`ЁЯУ▒ Webhook endpoint: http://localhost:${PORT}/whatsapp`);
  console.log(`ЁЯзк Test endpoint: http://localhost:${PORT}/webhook-test`);
  console.log(`ЁЯУК Products loaded: ${Object.keys(products).length > 0 ? 'тЬЕ' : 'тЭМ'}`);
  
  if (Object.keys(products).length > 0) {
    const totalProducts = Object.values(products.categories || {}).reduce((sum, category) => sum + (category.products?.length || 0), 0);
    console.log(`ЁЯУж Total products in database: ${totalProducts}`);
    console.log(`ЁЯУВ Categories available: ${Object.keys(products.categories || {}).length}`);
  }
  
  console.log('тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР');
  console.log('ЁЯОп Ready to receive WhatsApp messages!');
  console.log('ЁЯТб Make sure your ngrok tunnel is pointing to this server');
  console.log('ЁЯУЮ Configure Twilio webhook URL with your ngrok URL + /whatsapp');
  console.log('тХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХРтХР\n');
});
